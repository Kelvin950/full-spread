// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	asynq "github.com/hibiken/asynq"
	mock "github.com/stretchr/testify/mock"
)

// Itask is an autogenerated mock type for the Itask type
type Itask struct {
	mock.Mock
}

// Payload provides a mock function with no fields
func (_m *Itask) Payload() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Payload")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// ResultWriter provides a mock function with no fields
func (_m *Itask) ResultWriter() *asynq.ResultWriter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResultWriter")
	}

	var r0 *asynq.ResultWriter
	if rf, ok := ret.Get(0).(func() *asynq.ResultWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.ResultWriter)
		}
	}

	return r0
}

// Type provides a mock function with no fields
func (_m *Itask) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewItask creates a new instance of Itask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Itask {
	mock := &Itask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
