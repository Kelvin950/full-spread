// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/hibiken/asynq"
	mock "github.com/stretchr/testify/mock"
)

// NewItask creates a new instance of Itask. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItask(t interface {
	mock.TestingT
	Cleanup(func())
}) *Itask {
	mock := &Itask{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Itask is an autogenerated mock type for the Itask type
type Itask struct {
	mock.Mock
}

type Itask_Expecter struct {
	mock *mock.Mock
}

func (_m *Itask) EXPECT() *Itask_Expecter {
	return &Itask_Expecter{mock: &_m.Mock}
}

// Payload provides a mock function for the type Itask
func (_mock *Itask) Payload() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Payload")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// Itask_Payload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Payload'
type Itask_Payload_Call struct {
	*mock.Call
}

// Payload is a helper method to define mock.On call
func (_e *Itask_Expecter) Payload() *Itask_Payload_Call {
	return &Itask_Payload_Call{Call: _e.mock.On("Payload")}
}

func (_c *Itask_Payload_Call) Run(run func()) *Itask_Payload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Itask_Payload_Call) Return(bytes []byte) *Itask_Payload_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *Itask_Payload_Call) RunAndReturn(run func() []byte) *Itask_Payload_Call {
	_c.Call.Return(run)
	return _c
}

// ResultWriter provides a mock function for the type Itask
func (_mock *Itask) ResultWriter() *asynq.ResultWriter {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResultWriter")
	}

	var r0 *asynq.ResultWriter
	if returnFunc, ok := ret.Get(0).(func() *asynq.ResultWriter); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*asynq.ResultWriter)
		}
	}
	return r0
}

// Itask_ResultWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResultWriter'
type Itask_ResultWriter_Call struct {
	*mock.Call
}

// ResultWriter is a helper method to define mock.On call
func (_e *Itask_Expecter) ResultWriter() *Itask_ResultWriter_Call {
	return &Itask_ResultWriter_Call{Call: _e.mock.On("ResultWriter")}
}

func (_c *Itask_ResultWriter_Call) Run(run func()) *Itask_ResultWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Itask_ResultWriter_Call) Return(resultWriter *asynq.ResultWriter) *Itask_ResultWriter_Call {
	_c.Call.Return(resultWriter)
	return _c
}

func (_c *Itask_ResultWriter_Call) RunAndReturn(run func() *asynq.ResultWriter) *Itask_ResultWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function for the type Itask
func (_mock *Itask) Type() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Itask_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type Itask_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *Itask_Expecter) Type() *Itask_Type_Call {
	return &Itask_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *Itask_Type_Call) Run(run func()) *Itask_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Itask_Type_Call) Return(s string) *Itask_Type_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Itask_Type_Call) RunAndReturn(run func() string) *Itask_Type_Call {
	_c.Call.Return(run)
	return _c
}
