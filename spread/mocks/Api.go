// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewApi creates a new instance of Api. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *Api {
	mock := &Api{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Api is an autogenerated mock type for the Api type
type Api struct {
	mock.Mock
}

type Api_Expecter struct {
	mock *mock.Mock
}

func (_m *Api) EXPECT() *Api_Expecter {
	return &Api_Expecter{mock: &_m.Mock}
}

// CompleteMultiPart provides a mock function for the type Api
func (_mock *Api) CompleteMultiPart(data domain.CompleteMultiPart) (string, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CompleteMultiPart")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.CompleteMultiPart) (string, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.CompleteMultiPart) string); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.CompleteMultiPart) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_CompleteMultiPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteMultiPart'
type Api_CompleteMultiPart_Call struct {
	*mock.Call
}

// CompleteMultiPart is a helper method to define mock.On call
//   - data domain.CompleteMultiPart
func (_e *Api_Expecter) CompleteMultiPart(data interface{}) *Api_CompleteMultiPart_Call {
	return &Api_CompleteMultiPart_Call{Call: _e.mock.On("CompleteMultiPart", data)}
}

func (_c *Api_CompleteMultiPart_Call) Run(run func(data domain.CompleteMultiPart)) *Api_CompleteMultiPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.CompleteMultiPart
		if args[0] != nil {
			arg0 = args[0].(domain.CompleteMultiPart)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CompleteMultiPart_Call) Return(s string, err error) *Api_CompleteMultiPart_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Api_CompleteMultiPart_Call) RunAndReturn(run func(data domain.CompleteMultiPart) (string, error)) *Api_CompleteMultiPart_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCreator provides a mock function for the type Api
func (_mock *Api) CreateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_CreateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreator'
type Api_CreateCreator_Call struct {
	*mock.Call
}

// CreateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *Api_Expecter) CreateCreator(creator interface{}) *Api_CreateCreator_Call {
	return &Api_CreateCreator_Call{Call: _e.mock.On("CreateCreator", creator)}
}

func (_c *Api_CreateCreator_Call) Run(run func(creator *domain.Creator)) *Api_CreateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CreateCreator_Call) Return(err error) *Api_CreateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_CreateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *Api_CreateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMember provides a mock function for the type Api
func (_mock *Api) CreateMember(membership *domain.Members) error {
	ret := _mock.Called(membership)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Members) error); ok {
		r0 = returnFunc(membership)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type Api_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - membership *domain.Members
func (_e *Api_Expecter) CreateMember(membership interface{}) *Api_CreateMember_Call {
	return &Api_CreateMember_Call{Call: _e.mock.On("CreateMember", membership)}
}

func (_c *Api_CreateMember_Call) Run(run func(membership *domain.Members)) *Api_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Members
		if args[0] != nil {
			arg0 = args[0].(*domain.Members)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CreateMember_Call) Return(err error) *Api_CreateMember_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_CreateMember_Call) RunAndReturn(run func(membership *domain.Members) error) *Api_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMultiPartUpload provides a mock function for the type Api
func (_mock *Api) CreateMultiPartUpload(data domain.CreateMultiPartUpload) (string, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiPartUpload")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) (string, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) string); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.CreateMultiPartUpload) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_CreateMultiPartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMultiPartUpload'
type Api_CreateMultiPartUpload_Call struct {
	*mock.Call
}

// CreateMultiPartUpload is a helper method to define mock.On call
//   - data domain.CreateMultiPartUpload
func (_e *Api_Expecter) CreateMultiPartUpload(data interface{}) *Api_CreateMultiPartUpload_Call {
	return &Api_CreateMultiPartUpload_Call{Call: _e.mock.On("CreateMultiPartUpload", data)}
}

func (_c *Api_CreateMultiPartUpload_Call) Run(run func(data domain.CreateMultiPartUpload)) *Api_CreateMultiPartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.CreateMultiPartUpload
		if args[0] != nil {
			arg0 = args[0].(domain.CreateMultiPartUpload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CreateMultiPartUpload_Call) Return(s string, err error) *Api_CreateMultiPartUpload_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Api_CreateMultiPartUpload_Call) RunAndReturn(run func(data domain.CreateMultiPartUpload) (string, error)) *Api_CreateMultiPartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function for the type Api
func (_mock *Api) CreatePost(post *domain.Post, userId int) error {
	ret := _mock.Called(post, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post, int) error); ok {
		r0 = returnFunc(post, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type Api_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - post *domain.Post
//   - userId int
func (_e *Api_Expecter) CreatePost(post interface{}, userId interface{}) *Api_CreatePost_Call {
	return &Api_CreatePost_Call{Call: _e.mock.On("CreatePost", post, userId)}
}

func (_c *Api_CreatePost_Call) Run(run func(post *domain.Post, userId int)) *Api_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Api_CreatePost_Call) Return(err error) *Api_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_CreatePost_Call) RunAndReturn(run func(post *domain.Post, userId int) error) *Api_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePresignMultiPart provides a mock function for the type Api
func (_mock *Api) CreatePresignMultiPart(data []domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignMultiPart")
	}

	var r0 []domain.UplaodMultiPartApiRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]domain.UplaodMultiPart) []domain.UplaodMultiPartApiRes); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UplaodMultiPartApiRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]domain.UplaodMultiPart) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_CreatePresignMultiPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePresignMultiPart'
type Api_CreatePresignMultiPart_Call struct {
	*mock.Call
}

// CreatePresignMultiPart is a helper method to define mock.On call
//   - data []domain.UplaodMultiPart
func (_e *Api_Expecter) CreatePresignMultiPart(data interface{}) *Api_CreatePresignMultiPart_Call {
	return &Api_CreatePresignMultiPart_Call{Call: _e.mock.On("CreatePresignMultiPart", data)}
}

func (_c *Api_CreatePresignMultiPart_Call) Run(run func(data []domain.UplaodMultiPart)) *Api_CreatePresignMultiPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []domain.UplaodMultiPart
		if args[0] != nil {
			arg0 = args[0].([]domain.UplaodMultiPart)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CreatePresignMultiPart_Call) Return(uplaodMultiPartApiRess []domain.UplaodMultiPartApiRes, err error) *Api_CreatePresignMultiPart_Call {
	_c.Call.Return(uplaodMultiPartApiRess, err)
	return _c
}

func (_c *Api_CreatePresignMultiPart_Call) RunAndReturn(run func(data []domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error)) *Api_CreatePresignMultiPart_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function for the type Api
func (_mock *Api) CreateSubscription(sub *domain.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type Api_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - sub *domain.Subscription
func (_e *Api_Expecter) CreateSubscription(sub interface{}) *Api_CreateSubscription_Call {
	return &Api_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", sub)}
}

func (_c *Api_CreateSubscription_Call) Run(run func(sub *domain.Subscription)) *Api_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Subscription
		if args[0] != nil {
			arg0 = args[0].(*domain.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_CreateSubscription_Call) Return(err error) *Api_CreateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_CreateSubscription_Call) RunAndReturn(run func(sub *domain.Subscription) error) *Api_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type Api
func (_mock *Api) CreateUser(user *domain.User, password string) error {
	ret := _mock.Called(user, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User, string) error); ok {
		r0 = returnFunc(user, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Api_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *domain.User
//   - password string
func (_e *Api_Expecter) CreateUser(user interface{}, password interface{}) *Api_CreateUser_Call {
	return &Api_CreateUser_Call{Call: _e.mock.On("CreateUser", user, password)}
}

func (_c *Api_CreateUser_Call) Run(run func(user *domain.User, password string)) *Api_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Api_CreateUser_Call) Return(err error) *Api_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_CreateUser_Call) RunAndReturn(run func(user *domain.User, password string) error) *Api_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type Api
func (_mock *Api) DeleteUser(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Api_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int
func (_e *Api_Expecter) DeleteUser(id interface{}) *Api_DeleteUser_Call {
	return &Api_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *Api_DeleteUser_Call) Run(run func(id int)) *Api_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_DeleteUser_Call) Return(err error) *Api_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_DeleteUser_Call) RunAndReturn(run func(id int) error) *Api_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreator provides a mock function for the type Api
func (_mock *Api) GetCreator(creator domain.Creator) (domain.Creator, error) {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) (domain.Creator, error)); ok {
		return returnFunc(creator)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) domain.Creator); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Get(0).(domain.Creator)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Creator) error); ok {
		r1 = returnFunc(creator)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreator'
type Api_GetCreator_Call struct {
	*mock.Call
}

// GetCreator is a helper method to define mock.On call
//   - creator domain.Creator
func (_e *Api_Expecter) GetCreator(creator interface{}) *Api_GetCreator_Call {
	return &Api_GetCreator_Call{Call: _e.mock.On("GetCreator", creator)}
}

func (_c *Api_GetCreator_Call) Run(run func(creator domain.Creator)) *Api_GetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Creator
		if args[0] != nil {
			arg0 = args[0].(domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_GetCreator_Call) Return(creator1 domain.Creator, err error) *Api_GetCreator_Call {
	_c.Call.Return(creator1, err)
	return _c
}

func (_c *Api_GetCreator_Call) RunAndReturn(run func(creator domain.Creator) (domain.Creator, error)) *Api_GetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPost provides a mock function for the type Api
func (_mock *Api) GetCreatorPost(userID int, postid int) (domain.Post, error) {
	ret := _mock.Called(userID, postid)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPost")
	}

	var r0 domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) (domain.Post, error)); ok {
		return returnFunc(userID, postid)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) domain.Post); ok {
		r0 = returnFunc(userID, postid)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(userID, postid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetCreatorPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPost'
type Api_GetCreatorPost_Call struct {
	*mock.Call
}

// GetCreatorPost is a helper method to define mock.On call
//   - userID int
//   - postid int
func (_e *Api_Expecter) GetCreatorPost(userID interface{}, postid interface{}) *Api_GetCreatorPost_Call {
	return &Api_GetCreatorPost_Call{Call: _e.mock.On("GetCreatorPost", userID, postid)}
}

func (_c *Api_GetCreatorPost_Call) Run(run func(userID int, postid int)) *Api_GetCreatorPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Api_GetCreatorPost_Call) Return(post domain.Post, err error) *Api_GetCreatorPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *Api_GetCreatorPost_Call) RunAndReturn(run func(userID int, postid int) (domain.Post, error)) *Api_GetCreatorPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPosts provides a mock function for the type Api
func (_mock *Api) GetCreatorPosts(userId int, page int, pageSize int) ([]domain.Post, error) {
	ret := _mock.Called(userId, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPosts")
	}

	var r0 []domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, int) ([]domain.Post, error)); ok {
		return returnFunc(userId, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, int) []domain.Post); ok {
		r0 = returnFunc(userId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = returnFunc(userId, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetCreatorPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPosts'
type Api_GetCreatorPosts_Call struct {
	*mock.Call
}

// GetCreatorPosts is a helper method to define mock.On call
//   - userId int
//   - page int
//   - pageSize int
func (_e *Api_Expecter) GetCreatorPosts(userId interface{}, page interface{}, pageSize interface{}) *Api_GetCreatorPosts_Call {
	return &Api_GetCreatorPosts_Call{Call: _e.mock.On("GetCreatorPosts", userId, page, pageSize)}
}

func (_c *Api_GetCreatorPosts_Call) Run(run func(userId int, page int, pageSize int)) *Api_GetCreatorPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Api_GetCreatorPosts_Call) Return(posts []domain.Post, err error) *Api_GetCreatorPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *Api_GetCreatorPosts_Call) RunAndReturn(run func(userId int, page int, pageSize int) ([]domain.Post, error)) *Api_GetCreatorPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreators provides a mock function for the type Api
func (_mock *Api) GetCreators(page int, pageSize int) ([]domain.Creator, error) {
	ret := _mock.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreators")
	}

	var r0 []domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]domain.Creator, error)); ok {
		return returnFunc(page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []domain.Creator); ok {
		r0 = returnFunc(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Creator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetCreators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreators'
type Api_GetCreators_Call struct {
	*mock.Call
}

// GetCreators is a helper method to define mock.On call
//   - page int
//   - pageSize int
func (_e *Api_Expecter) GetCreators(page interface{}, pageSize interface{}) *Api_GetCreators_Call {
	return &Api_GetCreators_Call{Call: _e.mock.On("GetCreators", page, pageSize)}
}

func (_c *Api_GetCreators_Call) Run(run func(page int, pageSize int)) *Api_GetCreators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Api_GetCreators_Call) Return(creators []domain.Creator, err error) *Api_GetCreators_Call {
	_c.Call.Return(creators, err)
	return _c
}

func (_c *Api_GetCreators_Call) RunAndReturn(run func(page int, pageSize int) ([]domain.Creator, error)) *Api_GetCreators_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type Api
func (_mock *Api) GetUser(id uint) (domain.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) (domain.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) domain.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Api_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id uint
func (_e *Api_Expecter) GetUser(id interface{}) *Api_GetUser_Call {
	return &Api_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *Api_GetUser_Call) Run(run func(id uint)) *Api_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_GetUser_Call) Return(user domain.User, err error) *Api_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *Api_GetUser_Call) RunAndReturn(run func(id uint) (domain.User, error)) *Api_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMemberships provides a mock function for the type Api
func (_mock *Api) GetUserMemberships(userid uint) ([]domain.Members, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemberships")
	}

	var r0 []domain.Members
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) ([]domain.Members, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) []domain.Members); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Members)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetUserMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMemberships'
type Api_GetUserMemberships_Call struct {
	*mock.Call
}

// GetUserMemberships is a helper method to define mock.On call
//   - userid uint
func (_e *Api_Expecter) GetUserMemberships(userid interface{}) *Api_GetUserMemberships_Call {
	return &Api_GetUserMemberships_Call{Call: _e.mock.On("GetUserMemberships", userid)}
}

func (_c *Api_GetUserMemberships_Call) Run(run func(userid uint)) *Api_GetUserMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_GetUserMemberships_Call) Return(memberss []domain.Members, err error) *Api_GetUserMemberships_Call {
	_c.Call.Return(memberss, err)
	return _c
}

func (_c *Api_GetUserMemberships_Call) RunAndReturn(run func(userid uint) ([]domain.Members, error)) *Api_GetUserMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMembershipsandSubscriptions provides a mock function for the type Api
func (_mock *Api) GetUserMembershipsandSubscriptions(userid int) ([]domain.MembershipSubscription, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMembershipsandSubscriptions")
	}

	var r0 []domain.MembershipSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]domain.MembershipSubscription, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []domain.MembershipSubscription); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetUserMembershipsandSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMembershipsandSubscriptions'
type Api_GetUserMembershipsandSubscriptions_Call struct {
	*mock.Call
}

// GetUserMembershipsandSubscriptions is a helper method to define mock.On call
//   - userid int
func (_e *Api_Expecter) GetUserMembershipsandSubscriptions(userid interface{}) *Api_GetUserMembershipsandSubscriptions_Call {
	return &Api_GetUserMembershipsandSubscriptions_Call{Call: _e.mock.On("GetUserMembershipsandSubscriptions", userid)}
}

func (_c *Api_GetUserMembershipsandSubscriptions_Call) Run(run func(userid int)) *Api_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_GetUserMembershipsandSubscriptions_Call) Return(membershipSubscriptions []domain.MembershipSubscription, err error) *Api_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(membershipSubscriptions, err)
	return _c
}

func (_c *Api_GetUserMembershipsandSubscriptions_Call) RunAndReturn(run func(userid int) ([]domain.MembershipSubscription, error)) *Api_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSubscription provides a mock function for the type Api
func (_mock *Api) GetUserSubscription(membershipid int) (domain.Subscription, error) {
	ret := _mock.Called(membershipid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (domain.Subscription, error)); ok {
		return returnFunc(membershipid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) domain.Subscription); ok {
		r0 = returnFunc(membershipid)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(membershipid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_GetUserSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSubscription'
type Api_GetUserSubscription_Call struct {
	*mock.Call
}

// GetUserSubscription is a helper method to define mock.On call
//   - membershipid int
func (_e *Api_Expecter) GetUserSubscription(membershipid interface{}) *Api_GetUserSubscription_Call {
	return &Api_GetUserSubscription_Call{Call: _e.mock.On("GetUserSubscription", membershipid)}
}

func (_c *Api_GetUserSubscription_Call) Run(run func(membershipid int)) *Api_GetUserSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_GetUserSubscription_Call) Return(subscription domain.Subscription, err error) *Api_GetUserSubscription_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *Api_GetUserSubscription_Call) RunAndReturn(run func(membershipid int) (domain.Subscription, error)) *Api_GetUserSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type Api
func (_mock *Api) Login(email string, password string) (domain.User, string, error) {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (domain.User, string, error)); ok {
		return returnFunc(email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = returnFunc(email, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = returnFunc(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = returnFunc(email, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Api_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Api_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *Api_Expecter) Login(email interface{}, password interface{}) *Api_Login_Call {
	return &Api_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *Api_Login_Call) Run(run func(email string, password string)) *Api_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Api_Login_Call) Return(user domain.User, s string, err error) *Api_Login_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *Api_Login_Call) RunAndReturn(run func(email string, password string) (domain.User, string, error)) *Api_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginGoogleUser provides a mock function for the type Api
func (_mock *Api) LoginGoogleUser(cred string) (domain.User, string, error) {
	ret := _mock.Called(cred)

	if len(ret) == 0 {
		panic("no return value specified for LoginGoogleUser")
	}

	var r0 domain.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.User, string, error)); ok {
		return returnFunc(cred)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = returnFunc(cred)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(cred)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(cred)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// Api_LoginGoogleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginGoogleUser'
type Api_LoginGoogleUser_Call struct {
	*mock.Call
}

// LoginGoogleUser is a helper method to define mock.On call
//   - cred string
func (_e *Api_Expecter) LoginGoogleUser(cred interface{}) *Api_LoginGoogleUser_Call {
	return &Api_LoginGoogleUser_Call{Call: _e.mock.On("LoginGoogleUser", cred)}
}

func (_c *Api_LoginGoogleUser_Call) Run(run func(cred string)) *Api_LoginGoogleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_LoginGoogleUser_Call) Return(user domain.User, s string, err error) *Api_LoginGoogleUser_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *Api_LoginGoogleUser_Call) RunAndReturn(run func(cred string) (domain.User, string, error)) *Api_LoginGoogleUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCreator provides a mock function for the type Api
func (_mock *Api) UpdateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_UpdateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCreator'
type Api_UpdateCreator_Call struct {
	*mock.Call
}

// UpdateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *Api_Expecter) UpdateCreator(creator interface{}) *Api_UpdateCreator_Call {
	return &Api_UpdateCreator_Call{Call: _e.mock.On("UpdateCreator", creator)}
}

func (_c *Api_UpdateCreator_Call) Run(run func(creator *domain.Creator)) *Api_UpdateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_UpdateCreator_Call) Return(err error) *Api_UpdateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_UpdateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *Api_UpdateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type Api
func (_mock *Api) UpdateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Api_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Api_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *Api_Expecter) UpdateUser(user interface{}) *Api_UpdateUser_Call {
	return &Api_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *Api_UpdateUser_Call) Run(run func(user *domain.User)) *Api_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_UpdateUser_Call) Return(err error) *Api_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Api_UpdateUser_Call) RunAndReturn(run func(user *domain.User) error) *Api_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJwt provides a mock function for the type Api
func (_mock *Api) VerifyJwt(token string) (domain.Payload, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJwt")
	}

	var r0 domain.Payload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.Payload, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.Payload); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(domain.Payload)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Api_VerifyJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJwt'
type Api_VerifyJwt_Call struct {
	*mock.Call
}

// VerifyJwt is a helper method to define mock.On call
//   - token string
func (_e *Api_Expecter) VerifyJwt(token interface{}) *Api_VerifyJwt_Call {
	return &Api_VerifyJwt_Call{Call: _e.mock.On("VerifyJwt", token)}
}

func (_c *Api_VerifyJwt_Call) Run(run func(token string)) *Api_VerifyJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Api_VerifyJwt_Call) Return(payload domain.Payload, err error) *Api_VerifyJwt_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *Api_VerifyJwt_Call) RunAndReturn(run func(token string) (domain.Payload, error)) *Api_VerifyJwt_Call {
	_c.Call.Return(run)
	return _c
}
