// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// Api is an autogenerated mock type for the Api type
type Api struct {
	mock.Mock
}

// CompleteMultiPart provides a mock function with given fields: data
func (_m *Api) CompleteMultiPart(data domain.CompleteMultiPart) (string, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CompleteMultiPart")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CompleteMultiPart) (string, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(domain.CompleteMultiPart) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.CompleteMultiPart) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiPartUpload provides a mock function with given fields: data
func (_m *Api) CreateMultiPartUpload(data domain.CreateMultiPartUpload) (string, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiPartUpload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) (string, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.CreateMultiPartUpload) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignMultiPart provides a mock function with given fields: data
func (_m *Api) CreatePresignMultiPart(data []domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignMultiPart")
	}

	var r0 []domain.UplaodMultiPartApiRes
	var r1 error
	if rf, ok := ret.Get(0).(func([]domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]domain.UplaodMultiPart) []domain.UplaodMultiPartApiRes); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UplaodMultiPartApiRes)
		}
	}

	if rf, ok := ret.Get(1).(func([]domain.UplaodMultiPart) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApi creates a new instance of Api. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *Api {
	mock := &Api{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
