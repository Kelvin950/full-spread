// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewTaskQueue creates a new instance of TaskQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskQueue {
	mock := &TaskQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TaskQueue is an autogenerated mock type for the TaskQueue type
type TaskQueue struct {
	mock.Mock
}

type TaskQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskQueue) EXPECT() *TaskQueue_Expecter {
	return &TaskQueue_Expecter{mock: &_m.Mock}
}

// DistributeTask provides a mock function for the type TaskQueue
func (_mock *TaskQueue) DistributeTask(taskName string, priority string, taskpayload interface{}) error {
	ret := _mock.Called(taskName, priority, taskpayload)

	if len(ret) == 0 {
		panic("no return value specified for DistributeTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = returnFunc(taskName, priority, taskpayload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// TaskQueue_DistributeTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributeTask'
type TaskQueue_DistributeTask_Call struct {
	*mock.Call
}

// DistributeTask is a helper method to define mock.On call
//   - taskName string
//   - priority string
//   - taskpayload interface{}
func (_e *TaskQueue_Expecter) DistributeTask(taskName interface{}, priority interface{}, taskpayload interface{}) *TaskQueue_DistributeTask_Call {
	return &TaskQueue_DistributeTask_Call{Call: _e.mock.On("DistributeTask", taskName, priority, taskpayload)}
}

func (_c *TaskQueue_DistributeTask_Call) Run(run func(taskName string, priority string, taskpayload interface{})) *TaskQueue_DistributeTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *TaskQueue_DistributeTask_Call) Return(err error) *TaskQueue_DistributeTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *TaskQueue_DistributeTask_Call) RunAndReturn(run func(taskName string, priority string, taskpayload interface{}) error) *TaskQueue_DistributeTask_Call {
	_c.Call.Return(run)
	return _c
}
