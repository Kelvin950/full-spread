// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewDynamoClient creates a new instance of DynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DynamoClient {
	mock := &DynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DynamoClient is an autogenerated mock type for the DynamoClient type
type DynamoClient struct {
	mock.Mock
}

type DynamoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DynamoClient) EXPECT() *DynamoClient_Expecter {
	return &DynamoClient_Expecter{mock: &_m.Mock}
}

// GetItem provides a mock function for the type DynamoClient
func (_mock *DynamoClient) GetItem(ec2Id string, TaskId string) (domain.Ec2TaskState, error) {
	ret := _mock.Called(ec2Id, TaskId)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 domain.Ec2TaskState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (domain.Ec2TaskState, error)); ok {
		return returnFunc(ec2Id, TaskId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) domain.Ec2TaskState); ok {
		r0 = returnFunc(ec2Id, TaskId)
	} else {
		r0 = ret.Get(0).(domain.Ec2TaskState)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(ec2Id, TaskId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DynamoClient_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type DynamoClient_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ec2Id string
//   - TaskId string
func (_e *DynamoClient_Expecter) GetItem(ec2Id interface{}, TaskId interface{}) *DynamoClient_GetItem_Call {
	return &DynamoClient_GetItem_Call{Call: _e.mock.On("GetItem", ec2Id, TaskId)}
}

func (_c *DynamoClient_GetItem_Call) Run(run func(ec2Id string, TaskId string)) *DynamoClient_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DynamoClient_GetItem_Call) Return(ec2TaskState domain.Ec2TaskState, err error) *DynamoClient_GetItem_Call {
	_c.Call.Return(ec2TaskState, err)
	return _c
}

func (_c *DynamoClient_GetItem_Call) RunAndReturn(run func(ec2Id string, TaskId string) (domain.Ec2TaskState, error)) *DynamoClient_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function for the type DynamoClient
func (_mock *DynamoClient) PutItem(item domain.Ec2TaskState) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Ec2TaskState) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DynamoClient_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type DynamoClient_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - item domain.Ec2TaskState
func (_e *DynamoClient_Expecter) PutItem(item interface{}) *DynamoClient_PutItem_Call {
	return &DynamoClient_PutItem_Call{Call: _e.mock.On("PutItem", item)}
}

func (_c *DynamoClient_PutItem_Call) Run(run func(item domain.Ec2TaskState)) *DynamoClient_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Ec2TaskState
		if args[0] != nil {
			arg0 = args[0].(domain.Ec2TaskState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DynamoClient_PutItem_Call) Return(err error) *DynamoClient_PutItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *DynamoClient_PutItem_Call) RunAndReturn(run func(item domain.Ec2TaskState) error) *DynamoClient_PutItem_Call {
	_c.Call.Return(run)
	return _c
}
