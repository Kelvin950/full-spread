// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// DynamoClient is an autogenerated mock type for the DynamoClient type
type DynamoClient struct {
	mock.Mock
}

// GetItem provides a mock function with given fields: ec2Id, TaskId
func (_m *DynamoClient) GetItem(ec2Id string, TaskId string) (domain.Ec2TaskState, error) {
	ret := _m.Called(ec2Id, TaskId)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 domain.Ec2TaskState
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Ec2TaskState, error)); ok {
		return rf(ec2Id, TaskId)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Ec2TaskState); ok {
		r0 = rf(ec2Id, TaskId)
	} else {
		r0 = ret.Get(0).(domain.Ec2TaskState)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ec2Id, TaskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutItem provides a mock function with given fields: item
func (_m *DynamoClient) PutItem(item domain.Ec2TaskState) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Ec2TaskState) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDynamoClient creates a new instance of DynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DynamoClient {
	mock := &DynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
