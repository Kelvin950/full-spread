// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	mock "github.com/stretchr/testify/mock"
)

// NewEc2Client creates a new instance of Ec2Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEc2Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ec2Client {
	mock := &Ec2Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Ec2Client is an autogenerated mock type for the Ec2Client type
type Ec2Client struct {
	mock.Mock
}

type Ec2Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Ec2Client) EXPECT() *Ec2Client_Expecter {
	return &Ec2Client_Expecter{mock: &_m.Mock}
}

// CreateInstance provides a mock function for the type Ec2Client
func (_mock *Ec2Client) CreateInstance(timestarted string, taskid string) (*ec2.RunInstancesOutput, error) {
	ret := _mock.Called(timestarted, taskid)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 *ec2.RunInstancesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*ec2.RunInstancesOutput, error)); ok {
		return returnFunc(timestarted, taskid)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *ec2.RunInstancesOutput); ok {
		r0 = returnFunc(timestarted, taskid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RunInstancesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(timestarted, taskid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Ec2Client_CreateInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstance'
type Ec2Client_CreateInstance_Call struct {
	*mock.Call
}

// CreateInstance is a helper method to define mock.On call
//   - timestarted string
//   - taskid string
func (_e *Ec2Client_Expecter) CreateInstance(timestarted interface{}, taskid interface{}) *Ec2Client_CreateInstance_Call {
	return &Ec2Client_CreateInstance_Call{Call: _e.mock.On("CreateInstance", timestarted, taskid)}
}

func (_c *Ec2Client_CreateInstance_Call) Run(run func(timestarted string, taskid string)) *Ec2Client_CreateInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Ec2Client_CreateInstance_Call) Return(runInstancesOutput *ec2.RunInstancesOutput, err error) *Ec2Client_CreateInstance_Call {
	_c.Call.Return(runInstancesOutput, err)
	return _c
}

func (_c *Ec2Client_CreateInstance_Call) RunAndReturn(run func(timestarted string, taskid string) (*ec2.RunInstancesOutput, error)) *Ec2Client_CreateInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyInstance provides a mock function for the type Ec2Client
func (_mock *Ec2Client) DestroyInstance(instanceId string) error {
	ret := _mock.Called(instanceId)

	if len(ret) == 0 {
		panic("no return value specified for DestroyInstance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(instanceId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Ec2Client_DestroyInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyInstance'
type Ec2Client_DestroyInstance_Call struct {
	*mock.Call
}

// DestroyInstance is a helper method to define mock.On call
//   - instanceId string
func (_e *Ec2Client_Expecter) DestroyInstance(instanceId interface{}) *Ec2Client_DestroyInstance_Call {
	return &Ec2Client_DestroyInstance_Call{Call: _e.mock.On("DestroyInstance", instanceId)}
}

func (_c *Ec2Client_DestroyInstance_Call) Run(run func(instanceId string)) *Ec2Client_DestroyInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Ec2Client_DestroyInstance_Call) Return(err error) *Ec2Client_DestroyInstance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Ec2Client_DestroyInstance_Call) RunAndReturn(run func(instanceId string) error) *Ec2Client_DestroyInstance_Call {
	_c.Call.Return(run)
	return _c
}
