// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// Db is an autogenerated mock type for the Db type
type Db struct {
	mock.Mock
}

// CreateCreator provides a mock function with given fields: creator
func (_m *Db) CreateCreator(creator *domain.Creator) error {
	ret := _m.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = rf(creator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMember provides a mock function with given fields: member
func (_m *Db) CreateMember(member *domain.Members) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Members) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSubscription provides a mock function with given fields: sub
func (_m *Db) CreateSubscription(sub *domain.Subscription) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Subscription) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *Db) CreateUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: user
func (_m *Db) DeleteUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCreator provides a mock function with given fields: creator
func (_m *Db) GetCreator(creator domain.Creator) (domain.Creator, error) {
	ret := _m.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 domain.Creator
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Creator) (domain.Creator, error)); ok {
		return rf(creator)
	}
	if rf, ok := ret.Get(0).(func(domain.Creator) domain.Creator); ok {
		r0 = rf(creator)
	} else {
		r0 = ret.Get(0).(domain.Creator)
	}

	if rf, ok := ret.Get(1).(func(domain.Creator) error); ok {
		r1 = rf(creator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreators provides a mock function with given fields: page, pagesize
func (_m *Db) GetCreators(page int, pagesize int) ([]domain.Creator, error) {
	ret := _m.Called(page, pagesize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreators")
	}

	var r0 []domain.Creator
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Creator, error)); ok {
		return rf(page, pagesize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Creator); ok {
		r0 = rf(page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Creator)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pagesize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: user
func (_m *Db) GetUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmailOrUsername provides a mock function with given fields: user
func (_m *Db) GetUserByEmailOrUsername(user domain.User) (domain.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailOrUsername")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByFireBaseUid provides a mock function with given fields: user
func (_m *Db) GetUserByFireBaseUid(user domain.User) (domain.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByFireBaseUid")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMemberships provides a mock function with given fields: memberid, page, pageSize
func (_m *Db) GetUserMemberships(memberid uint, page int, pageSize int) ([]domain.Members, error) {
	ret := _m.Called(memberid, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemberships")
	}

	var r0 []domain.Members
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]domain.Members, error)); ok {
		return rf(memberid, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []domain.Members); ok {
		r0 = rf(memberid, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Members)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(memberid, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMembershipsandSubscriptions provides a mock function with given fields: userid
func (_m *Db) GetUserMembershipsandSubscriptions(userid int) ([]domain.MembershipSubscription, error) {
	ret := _m.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMembershipsandSubscriptions")
	}

	var r0 []domain.MembershipSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.MembershipSubscription, error)); ok {
		return rf(userid)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.MembershipSubscription); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSubscription provides a mock function with given fields: membershipId
func (_m *Db) GetUserSubscription(membershipId int) (domain.Subscription, error) {
	ret := _m.Called(membershipId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Subscription, error)); ok {
		return rf(membershipId)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Subscription); ok {
		r0 = rf(membershipId)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(membershipId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCreator provides a mock function with given fields: creator
func (_m *Db) UpdateCreator(creator *domain.Creator) error {
	ret := _m.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = rf(creator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *Db) UpdateUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDb creates a new instance of Db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
