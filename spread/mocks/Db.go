// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewDb creates a new instance of Db. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *Db {
	mock := &Db{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Db is an autogenerated mock type for the Db type
type Db struct {
	mock.Mock
}

type Db_Expecter struct {
	mock *mock.Mock
}

func (_m *Db) EXPECT() *Db_Expecter {
	return &Db_Expecter{mock: &_m.Mock}
}

// CreateContent provides a mock function for the type Db
func (_mock *Db) CreateContent(content *domain.Content) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Content) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type Db_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - content *domain.Content
func (_e *Db_Expecter) CreateContent(content interface{}) *Db_CreateContent_Call {
	return &Db_CreateContent_Call{Call: _e.mock.On("CreateContent", content)}
}

func (_c *Db_CreateContent_Call) Run(run func(content *domain.Content)) *Db_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Content
		if args[0] != nil {
			arg0 = args[0].(*domain.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreateContent_Call) Return(err error) *Db_CreateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreateContent_Call) RunAndReturn(run func(content *domain.Content) error) *Db_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCreator provides a mock function for the type Db
func (_mock *Db) CreateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreator'
type Db_CreateCreator_Call struct {
	*mock.Call
}

// CreateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *Db_Expecter) CreateCreator(creator interface{}) *Db_CreateCreator_Call {
	return &Db_CreateCreator_Call{Call: _e.mock.On("CreateCreator", creator)}
}

func (_c *Db_CreateCreator_Call) Run(run func(creator *domain.Creator)) *Db_CreateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreateCreator_Call) Return(err error) *Db_CreateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *Db_CreateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMember provides a mock function for the type Db
func (_mock *Db) CreateMember(member *domain.Members) error {
	ret := _mock.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Members) error); ok {
		r0 = returnFunc(member)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type Db_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - member *domain.Members
func (_e *Db_Expecter) CreateMember(member interface{}) *Db_CreateMember_Call {
	return &Db_CreateMember_Call{Call: _e.mock.On("CreateMember", member)}
}

func (_c *Db_CreateMember_Call) Run(run func(member *domain.Members)) *Db_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Members
		if args[0] != nil {
			arg0 = args[0].(*domain.Members)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreateMember_Call) Return(err error) *Db_CreateMember_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreateMember_Call) RunAndReturn(run func(member *domain.Members) error) *Db_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function for the type Db
func (_mock *Db) CreatePost(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type Db_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - post *domain.Post
func (_e *Db_Expecter) CreatePost(post interface{}) *Db_CreatePost_Call {
	return &Db_CreatePost_Call{Call: _e.mock.On("CreatePost", post)}
}

func (_c *Db_CreatePost_Call) Run(run func(post *domain.Post)) *Db_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreatePost_Call) Return(err error) *Db_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreatePost_Call) RunAndReturn(run func(post *domain.Post) error) *Db_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function for the type Db
func (_mock *Db) CreateSubscription(sub *domain.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type Db_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - sub *domain.Subscription
func (_e *Db_Expecter) CreateSubscription(sub interface{}) *Db_CreateSubscription_Call {
	return &Db_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", sub)}
}

func (_c *Db_CreateSubscription_Call) Run(run func(sub *domain.Subscription)) *Db_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Subscription
		if args[0] != nil {
			arg0 = args[0].(*domain.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreateSubscription_Call) Return(err error) *Db_CreateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreateSubscription_Call) RunAndReturn(run func(sub *domain.Subscription) error) *Db_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type Db
func (_mock *Db) CreateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Db_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *Db_Expecter) CreateUser(user interface{}) *Db_CreateUser_Call {
	return &Db_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *Db_CreateUser_Call) Run(run func(user *domain.User)) *Db_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_CreateUser_Call) Return(err error) *Db_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_CreateUser_Call) RunAndReturn(run func(user *domain.User) error) *Db_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type Db
func (_mock *Db) DeleteUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type Db_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *Db_Expecter) DeleteUser(user interface{}) *Db_DeleteUser_Call {
	return &Db_DeleteUser_Call{Call: _e.mock.On("DeleteUser", user)}
}

func (_c *Db_DeleteUser_Call) Run(run func(user *domain.User)) *Db_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_DeleteUser_Call) Return(err error) *Db_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_DeleteUser_Call) RunAndReturn(run func(user *domain.User) error) *Db_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreator provides a mock function for the type Db
func (_mock *Db) GetCreator(creator domain.Creator) (domain.Creator, error) {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) (domain.Creator, error)); ok {
		return returnFunc(creator)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) domain.Creator); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Get(0).(domain.Creator)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Creator) error); ok {
		r1 = returnFunc(creator)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreator'
type Db_GetCreator_Call struct {
	*mock.Call
}

// GetCreator is a helper method to define mock.On call
//   - creator domain.Creator
func (_e *Db_Expecter) GetCreator(creator interface{}) *Db_GetCreator_Call {
	return &Db_GetCreator_Call{Call: _e.mock.On("GetCreator", creator)}
}

func (_c *Db_GetCreator_Call) Run(run func(creator domain.Creator)) *Db_GetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Creator
		if args[0] != nil {
			arg0 = args[0].(domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetCreator_Call) Return(creator1 domain.Creator, err error) *Db_GetCreator_Call {
	_c.Call.Return(creator1, err)
	return _c
}

func (_c *Db_GetCreator_Call) RunAndReturn(run func(creator domain.Creator) (domain.Creator, error)) *Db_GetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPost provides a mock function for the type Db
func (_mock *Db) GetCreatorPost(creatorid uint, postid uint) (domain.Post, error) {
	ret := _mock.Called(creatorid, postid)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPost")
	}

	var r0 domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, uint) (domain.Post, error)); ok {
		return returnFunc(creatorid, postid)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, uint) domain.Post); ok {
		r0 = returnFunc(creatorid, postid)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}
	if returnFunc, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = returnFunc(creatorid, postid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetCreatorPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPost'
type Db_GetCreatorPost_Call struct {
	*mock.Call
}

// GetCreatorPost is a helper method to define mock.On call
//   - creatorid uint
//   - postid uint
func (_e *Db_Expecter) GetCreatorPost(creatorid interface{}, postid interface{}) *Db_GetCreatorPost_Call {
	return &Db_GetCreatorPost_Call{Call: _e.mock.On("GetCreatorPost", creatorid, postid)}
}

func (_c *Db_GetCreatorPost_Call) Run(run func(creatorid uint, postid uint)) *Db_GetCreatorPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Db_GetCreatorPost_Call) Return(post domain.Post, err error) *Db_GetCreatorPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *Db_GetCreatorPost_Call) RunAndReturn(run func(creatorid uint, postid uint) (domain.Post, error)) *Db_GetCreatorPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPosts provides a mock function for the type Db
func (_mock *Db) GetCreatorPosts(creatorid uint, page int, pagesize int) ([]domain.Post, error) {
	ret := _mock.Called(creatorid, page, pagesize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPosts")
	}

	var r0 []domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) ([]domain.Post, error)); ok {
		return returnFunc(creatorid, page, pagesize)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) []domain.Post); ok {
		r0 = returnFunc(creatorid, page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = returnFunc(creatorid, page, pagesize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetCreatorPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPosts'
type Db_GetCreatorPosts_Call struct {
	*mock.Call
}

// GetCreatorPosts is a helper method to define mock.On call
//   - creatorid uint
//   - page int
//   - pagesize int
func (_e *Db_Expecter) GetCreatorPosts(creatorid interface{}, page interface{}, pagesize interface{}) *Db_GetCreatorPosts_Call {
	return &Db_GetCreatorPosts_Call{Call: _e.mock.On("GetCreatorPosts", creatorid, page, pagesize)}
}

func (_c *Db_GetCreatorPosts_Call) Run(run func(creatorid uint, page int, pagesize int)) *Db_GetCreatorPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Db_GetCreatorPosts_Call) Return(posts []domain.Post, err error) *Db_GetCreatorPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *Db_GetCreatorPosts_Call) RunAndReturn(run func(creatorid uint, page int, pagesize int) ([]domain.Post, error)) *Db_GetCreatorPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreators provides a mock function for the type Db
func (_mock *Db) GetCreators(page int, pagesize int) ([]domain.Creator, error) {
	ret := _mock.Called(page, pagesize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreators")
	}

	var r0 []domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]domain.Creator, error)); ok {
		return returnFunc(page, pagesize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []domain.Creator); ok {
		r0 = returnFunc(page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Creator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, pagesize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetCreators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreators'
type Db_GetCreators_Call struct {
	*mock.Call
}

// GetCreators is a helper method to define mock.On call
//   - page int
//   - pagesize int
func (_e *Db_Expecter) GetCreators(page interface{}, pagesize interface{}) *Db_GetCreators_Call {
	return &Db_GetCreators_Call{Call: _e.mock.On("GetCreators", page, pagesize)}
}

func (_c *Db_GetCreators_Call) Run(run func(page int, pagesize int)) *Db_GetCreators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Db_GetCreators_Call) Return(creators []domain.Creator, err error) *Db_GetCreators_Call {
	_c.Call.Return(creators, err)
	return _c
}

func (_c *Db_GetCreators_Call) RunAndReturn(run func(page int, pagesize int) ([]domain.Creator, error)) *Db_GetCreators_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type Db
func (_mock *Db) GetUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Db_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *Db_Expecter) GetUser(user interface{}) *Db_GetUser_Call {
	return &Db_GetUser_Call{Call: _e.mock.On("GetUser", user)}
}

func (_c *Db_GetUser_Call) Run(run func(user *domain.User)) *Db_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetUser_Call) Return(err error) *Db_GetUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_GetUser_Call) RunAndReturn(run func(user *domain.User) error) *Db_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmailOrUsername provides a mock function for the type Db
func (_mock *Db) GetUserByEmailOrUsername(user domain.User) (domain.User, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailOrUsername")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetUserByEmailOrUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmailOrUsername'
type Db_GetUserByEmailOrUsername_Call struct {
	*mock.Call
}

// GetUserByEmailOrUsername is a helper method to define mock.On call
//   - user domain.User
func (_e *Db_Expecter) GetUserByEmailOrUsername(user interface{}) *Db_GetUserByEmailOrUsername_Call {
	return &Db_GetUserByEmailOrUsername_Call{Call: _e.mock.On("GetUserByEmailOrUsername", user)}
}

func (_c *Db_GetUserByEmailOrUsername_Call) Run(run func(user domain.User)) *Db_GetUserByEmailOrUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.User
		if args[0] != nil {
			arg0 = args[0].(domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetUserByEmailOrUsername_Call) Return(user1 domain.User, err error) *Db_GetUserByEmailOrUsername_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *Db_GetUserByEmailOrUsername_Call) RunAndReturn(run func(user domain.User) (domain.User, error)) *Db_GetUserByEmailOrUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByFireBaseUid provides a mock function for the type Db
func (_mock *Db) GetUserByFireBaseUid(user domain.User) (domain.User, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByFireBaseUid")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetUserByFireBaseUid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByFireBaseUid'
type Db_GetUserByFireBaseUid_Call struct {
	*mock.Call
}

// GetUserByFireBaseUid is a helper method to define mock.On call
//   - user domain.User
func (_e *Db_Expecter) GetUserByFireBaseUid(user interface{}) *Db_GetUserByFireBaseUid_Call {
	return &Db_GetUserByFireBaseUid_Call{Call: _e.mock.On("GetUserByFireBaseUid", user)}
}

func (_c *Db_GetUserByFireBaseUid_Call) Run(run func(user domain.User)) *Db_GetUserByFireBaseUid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.User
		if args[0] != nil {
			arg0 = args[0].(domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetUserByFireBaseUid_Call) Return(user1 domain.User, err error) *Db_GetUserByFireBaseUid_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *Db_GetUserByFireBaseUid_Call) RunAndReturn(run func(user domain.User) (domain.User, error)) *Db_GetUserByFireBaseUid_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMemberships provides a mock function for the type Db
func (_mock *Db) GetUserMemberships(memberid uint, page int, pageSize int) ([]domain.Members, error) {
	ret := _mock.Called(memberid, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemberships")
	}

	var r0 []domain.Members
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) ([]domain.Members, error)); ok {
		return returnFunc(memberid, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) []domain.Members); ok {
		r0 = returnFunc(memberid, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Members)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = returnFunc(memberid, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetUserMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMemberships'
type Db_GetUserMemberships_Call struct {
	*mock.Call
}

// GetUserMemberships is a helper method to define mock.On call
//   - memberid uint
//   - page int
//   - pageSize int
func (_e *Db_Expecter) GetUserMemberships(memberid interface{}, page interface{}, pageSize interface{}) *Db_GetUserMemberships_Call {
	return &Db_GetUserMemberships_Call{Call: _e.mock.On("GetUserMemberships", memberid, page, pageSize)}
}

func (_c *Db_GetUserMemberships_Call) Run(run func(memberid uint, page int, pageSize int)) *Db_GetUserMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Db_GetUserMemberships_Call) Return(memberss []domain.Members, err error) *Db_GetUserMemberships_Call {
	_c.Call.Return(memberss, err)
	return _c
}

func (_c *Db_GetUserMemberships_Call) RunAndReturn(run func(memberid uint, page int, pageSize int) ([]domain.Members, error)) *Db_GetUserMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMembershipsandSubscriptions provides a mock function for the type Db
func (_mock *Db) GetUserMembershipsandSubscriptions(userid int) ([]domain.MembershipSubscription, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMembershipsandSubscriptions")
	}

	var r0 []domain.MembershipSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]domain.MembershipSubscription, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []domain.MembershipSubscription); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetUserMembershipsandSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMembershipsandSubscriptions'
type Db_GetUserMembershipsandSubscriptions_Call struct {
	*mock.Call
}

// GetUserMembershipsandSubscriptions is a helper method to define mock.On call
//   - userid int
func (_e *Db_Expecter) GetUserMembershipsandSubscriptions(userid interface{}) *Db_GetUserMembershipsandSubscriptions_Call {
	return &Db_GetUserMembershipsandSubscriptions_Call{Call: _e.mock.On("GetUserMembershipsandSubscriptions", userid)}
}

func (_c *Db_GetUserMembershipsandSubscriptions_Call) Run(run func(userid int)) *Db_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetUserMembershipsandSubscriptions_Call) Return(membershipSubscriptions []domain.MembershipSubscription, err error) *Db_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(membershipSubscriptions, err)
	return _c
}

func (_c *Db_GetUserMembershipsandSubscriptions_Call) RunAndReturn(run func(userid int) ([]domain.MembershipSubscription, error)) *Db_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSubscription provides a mock function for the type Db
func (_mock *Db) GetUserSubscription(membershipId int) (domain.Subscription, error) {
	ret := _mock.Called(membershipId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (domain.Subscription, error)); ok {
		return returnFunc(membershipId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) domain.Subscription); ok {
		r0 = returnFunc(membershipId)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(membershipId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Db_GetUserSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSubscription'
type Db_GetUserSubscription_Call struct {
	*mock.Call
}

// GetUserSubscription is a helper method to define mock.On call
//   - membershipId int
func (_e *Db_Expecter) GetUserSubscription(membershipId interface{}) *Db_GetUserSubscription_Call {
	return &Db_GetUserSubscription_Call{Call: _e.mock.On("GetUserSubscription", membershipId)}
}

func (_c *Db_GetUserSubscription_Call) Run(run func(membershipId int)) *Db_GetUserSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_GetUserSubscription_Call) Return(subscription domain.Subscription, err error) *Db_GetUserSubscription_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *Db_GetUserSubscription_Call) RunAndReturn(run func(membershipId int) (domain.Subscription, error)) *Db_GetUserSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function for the type Db
func (_mock *Db) UpdateContent(content *domain.Content) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Content) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type Db_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - content *domain.Content
func (_e *Db_Expecter) UpdateContent(content interface{}) *Db_UpdateContent_Call {
	return &Db_UpdateContent_Call{Call: _e.mock.On("UpdateContent", content)}
}

func (_c *Db_UpdateContent_Call) Run(run func(content *domain.Content)) *Db_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Content
		if args[0] != nil {
			arg0 = args[0].(*domain.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_UpdateContent_Call) Return(err error) *Db_UpdateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_UpdateContent_Call) RunAndReturn(run func(content *domain.Content) error) *Db_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCreator provides a mock function for the type Db
func (_mock *Db) UpdateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_UpdateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCreator'
type Db_UpdateCreator_Call struct {
	*mock.Call
}

// UpdateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *Db_Expecter) UpdateCreator(creator interface{}) *Db_UpdateCreator_Call {
	return &Db_UpdateCreator_Call{Call: _e.mock.On("UpdateCreator", creator)}
}

func (_c *Db_UpdateCreator_Call) Run(run func(creator *domain.Creator)) *Db_UpdateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_UpdateCreator_Call) Return(err error) *Db_UpdateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_UpdateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *Db_UpdateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function for the type Db
func (_mock *Db) UpdatePost(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type Db_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - post *domain.Post
func (_e *Db_Expecter) UpdatePost(post interface{}) *Db_UpdatePost_Call {
	return &Db_UpdatePost_Call{Call: _e.mock.On("UpdatePost", post)}
}

func (_c *Db_UpdatePost_Call) Run(run func(post *domain.Post)) *Db_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_UpdatePost_Call) Return(err error) *Db_UpdatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_UpdatePost_Call) RunAndReturn(run func(post *domain.Post) error) *Db_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type Db
func (_mock *Db) UpdateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Db_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type Db_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *Db_Expecter) UpdateUser(user interface{}) *Db_UpdateUser_Call {
	return &Db_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *Db_UpdateUser_Call) Run(run func(user *domain.User)) *Db_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Db_UpdateUser_Call) Return(err error) *Db_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Db_UpdateUser_Call) RunAndReturn(run func(user *domain.User) error) *Db_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
