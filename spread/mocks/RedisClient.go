// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewRedisClient creates a new instance of RedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisClient {
	mock := &RedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RedisClient is an autogenerated mock type for the RedisClient type
type RedisClient struct {
	mock.Mock
}

type RedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisClient) EXPECT() *RedisClient_Expecter {
	return &RedisClient_Expecter{mock: &_m.Mock}
}

// MakeRedisClient provides a mock function for the type RedisClient
func (_mock *RedisClient) MakeRedisClient() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRedisClient")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// RedisClient_MakeRedisClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRedisClient'
type RedisClient_MakeRedisClient_Call struct {
	*mock.Call
}

// MakeRedisClient is a helper method to define mock.On call
func (_e *RedisClient_Expecter) MakeRedisClient() *RedisClient_MakeRedisClient_Call {
	return &RedisClient_MakeRedisClient_Call{Call: _e.mock.On("MakeRedisClient")}
}

func (_c *RedisClient_MakeRedisClient_Call) Run(run func()) *RedisClient_MakeRedisClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RedisClient_MakeRedisClient_Call) Return(ifaceVal interface{}) *RedisClient_MakeRedisClient_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *RedisClient_MakeRedisClient_Call) RunAndReturn(run func() interface{}) *RedisClient_MakeRedisClient_Call {
	_c.Call.Return(run)
	return _c
}
