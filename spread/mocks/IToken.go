// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IToken is an autogenerated mock type for the IToken type
type IToken struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: p, d
func (_m *IToken) CreateToken(p domain.Payload, d time.Duration) (string, error) {
	ret := _m.Called(p, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Payload, time.Duration) (string, error)); ok {
		return rf(p, d)
	}
	if rf, ok := ret.Get(0).(func(domain.Payload, time.Duration) string); ok {
		r0 = rf(p, d)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.Payload, time.Duration) error); ok {
		r1 = rf(p, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeGoogleToken provides a mock function with given fields: accessToken
func (_m *IToken) DecodeGoogleToken(accessToken string) (domain.GoogleuserRes, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for DecodeGoogleToken")
	}

	var r0 domain.GoogleuserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.GoogleuserRes, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) domain.GoogleuserRes); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(domain.GoogleuserRes)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *IToken) VerifyToken(tokenString string) (domain.Payload, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 domain.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Payload, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Payload); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(domain.Payload)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIToken creates a new instance of IToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *IToken {
	mock := &IToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
