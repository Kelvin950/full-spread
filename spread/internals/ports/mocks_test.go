// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockApi creates a new instance of MockApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApi {
	mock := &MockApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockApi is an autogenerated mock type for the Api type
type MockApi struct {
	mock.Mock
}

type MockApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApi) EXPECT() *MockApi_Expecter {
	return &MockApi_Expecter{mock: &_m.Mock}
}

// CompleteMultiPart provides a mock function for the type MockApi
func (_mock *MockApi) CompleteMultiPart(data domain.CompleteMultiPart) (string, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CompleteMultiPart")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.CompleteMultiPart) (string, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.CompleteMultiPart) string); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.CompleteMultiPart) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_CompleteMultiPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteMultiPart'
type MockApi_CompleteMultiPart_Call struct {
	*mock.Call
}

// CompleteMultiPart is a helper method to define mock.On call
//   - data domain.CompleteMultiPart
func (_e *MockApi_Expecter) CompleteMultiPart(data interface{}) *MockApi_CompleteMultiPart_Call {
	return &MockApi_CompleteMultiPart_Call{Call: _e.mock.On("CompleteMultiPart", data)}
}

func (_c *MockApi_CompleteMultiPart_Call) Run(run func(data domain.CompleteMultiPart)) *MockApi_CompleteMultiPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.CompleteMultiPart
		if args[0] != nil {
			arg0 = args[0].(domain.CompleteMultiPart)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CompleteMultiPart_Call) Return(s string, err error) *MockApi_CompleteMultiPart_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockApi_CompleteMultiPart_Call) RunAndReturn(run func(data domain.CompleteMultiPart) (string, error)) *MockApi_CompleteMultiPart_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCreator provides a mock function for the type MockApi
func (_mock *MockApi) CreateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_CreateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreator'
type MockApi_CreateCreator_Call struct {
	*mock.Call
}

// CreateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *MockApi_Expecter) CreateCreator(creator interface{}) *MockApi_CreateCreator_Call {
	return &MockApi_CreateCreator_Call{Call: _e.mock.On("CreateCreator", creator)}
}

func (_c *MockApi_CreateCreator_Call) Run(run func(creator *domain.Creator)) *MockApi_CreateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CreateCreator_Call) Return(err error) *MockApi_CreateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_CreateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *MockApi_CreateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMember provides a mock function for the type MockApi
func (_mock *MockApi) CreateMember(membership *domain.Members) error {
	ret := _mock.Called(membership)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Members) error); ok {
		r0 = returnFunc(membership)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type MockApi_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - membership *domain.Members
func (_e *MockApi_Expecter) CreateMember(membership interface{}) *MockApi_CreateMember_Call {
	return &MockApi_CreateMember_Call{Call: _e.mock.On("CreateMember", membership)}
}

func (_c *MockApi_CreateMember_Call) Run(run func(membership *domain.Members)) *MockApi_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Members
		if args[0] != nil {
			arg0 = args[0].(*domain.Members)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CreateMember_Call) Return(err error) *MockApi_CreateMember_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_CreateMember_Call) RunAndReturn(run func(membership *domain.Members) error) *MockApi_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMultiPartUpload provides a mock function for the type MockApi
func (_mock *MockApi) CreateMultiPartUpload(data domain.CreateMultiPartUpload) (string, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiPartUpload")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) (string, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.CreateMultiPartUpload) string); ok {
		r0 = returnFunc(data)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.CreateMultiPartUpload) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_CreateMultiPartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMultiPartUpload'
type MockApi_CreateMultiPartUpload_Call struct {
	*mock.Call
}

// CreateMultiPartUpload is a helper method to define mock.On call
//   - data domain.CreateMultiPartUpload
func (_e *MockApi_Expecter) CreateMultiPartUpload(data interface{}) *MockApi_CreateMultiPartUpload_Call {
	return &MockApi_CreateMultiPartUpload_Call{Call: _e.mock.On("CreateMultiPartUpload", data)}
}

func (_c *MockApi_CreateMultiPartUpload_Call) Run(run func(data domain.CreateMultiPartUpload)) *MockApi_CreateMultiPartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.CreateMultiPartUpload
		if args[0] != nil {
			arg0 = args[0].(domain.CreateMultiPartUpload)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CreateMultiPartUpload_Call) Return(s string, err error) *MockApi_CreateMultiPartUpload_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockApi_CreateMultiPartUpload_Call) RunAndReturn(run func(data domain.CreateMultiPartUpload) (string, error)) *MockApi_CreateMultiPartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePresignMultiPart provides a mock function for the type MockApi
func (_mock *MockApi) CreatePresignMultiPart(data []domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error) {
	ret := _mock.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignMultiPart")
	}

	var r0 []domain.UplaodMultiPartApiRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error)); ok {
		return returnFunc(data)
	}
	if returnFunc, ok := ret.Get(0).(func([]domain.UplaodMultiPart) []domain.UplaodMultiPartApiRes); ok {
		r0 = returnFunc(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UplaodMultiPartApiRes)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]domain.UplaodMultiPart) error); ok {
		r1 = returnFunc(data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_CreatePresignMultiPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePresignMultiPart'
type MockApi_CreatePresignMultiPart_Call struct {
	*mock.Call
}

// CreatePresignMultiPart is a helper method to define mock.On call
//   - data []domain.UplaodMultiPart
func (_e *MockApi_Expecter) CreatePresignMultiPart(data interface{}) *MockApi_CreatePresignMultiPart_Call {
	return &MockApi_CreatePresignMultiPart_Call{Call: _e.mock.On("CreatePresignMultiPart", data)}
}

func (_c *MockApi_CreatePresignMultiPart_Call) Run(run func(data []domain.UplaodMultiPart)) *MockApi_CreatePresignMultiPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []domain.UplaodMultiPart
		if args[0] != nil {
			arg0 = args[0].([]domain.UplaodMultiPart)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CreatePresignMultiPart_Call) Return(uplaodMultiPartApiRess []domain.UplaodMultiPartApiRes, err error) *MockApi_CreatePresignMultiPart_Call {
	_c.Call.Return(uplaodMultiPartApiRess, err)
	return _c
}

func (_c *MockApi_CreatePresignMultiPart_Call) RunAndReturn(run func(data []domain.UplaodMultiPart) ([]domain.UplaodMultiPartApiRes, error)) *MockApi_CreatePresignMultiPart_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function for the type MockApi
func (_mock *MockApi) CreateSubscription(sub *domain.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockApi_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - sub *domain.Subscription
func (_e *MockApi_Expecter) CreateSubscription(sub interface{}) *MockApi_CreateSubscription_Call {
	return &MockApi_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", sub)}
}

func (_c *MockApi_CreateSubscription_Call) Run(run func(sub *domain.Subscription)) *MockApi_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Subscription
		if args[0] != nil {
			arg0 = args[0].(*domain.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_CreateSubscription_Call) Return(err error) *MockApi_CreateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_CreateSubscription_Call) RunAndReturn(run func(sub *domain.Subscription) error) *MockApi_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockApi
func (_mock *MockApi) CreateUser(user *domain.User, password string) error {
	ret := _mock.Called(user, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User, string) error); ok {
		r0 = returnFunc(user, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockApi_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *domain.User
//   - password string
func (_e *MockApi_Expecter) CreateUser(user interface{}, password interface{}) *MockApi_CreateUser_Call {
	return &MockApi_CreateUser_Call{Call: _e.mock.On("CreateUser", user, password)}
}

func (_c *MockApi_CreateUser_Call) Run(run func(user *domain.User, password string)) *MockApi_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApi_CreateUser_Call) Return(err error) *MockApi_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_CreateUser_Call) RunAndReturn(run func(user *domain.User, password string) error) *MockApi_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockApi
func (_mock *MockApi) DeleteUser(id int) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockApi_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int
func (_e *MockApi_Expecter) DeleteUser(id interface{}) *MockApi_DeleteUser_Call {
	return &MockApi_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockApi_DeleteUser_Call) Run(run func(id int)) *MockApi_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_DeleteUser_Call) Return(err error) *MockApi_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_DeleteUser_Call) RunAndReturn(run func(id int) error) *MockApi_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreator provides a mock function for the type MockApi
func (_mock *MockApi) GetCreator(creator domain.Creator) (domain.Creator, error) {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) (domain.Creator, error)); ok {
		return returnFunc(creator)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) domain.Creator); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Get(0).(domain.Creator)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Creator) error); ok {
		r1 = returnFunc(creator)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreator'
type MockApi_GetCreator_Call struct {
	*mock.Call
}

// GetCreator is a helper method to define mock.On call
//   - creator domain.Creator
func (_e *MockApi_Expecter) GetCreator(creator interface{}) *MockApi_GetCreator_Call {
	return &MockApi_GetCreator_Call{Call: _e.mock.On("GetCreator", creator)}
}

func (_c *MockApi_GetCreator_Call) Run(run func(creator domain.Creator)) *MockApi_GetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Creator
		if args[0] != nil {
			arg0 = args[0].(domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_GetCreator_Call) Return(creator1 domain.Creator, err error) *MockApi_GetCreator_Call {
	_c.Call.Return(creator1, err)
	return _c
}

func (_c *MockApi_GetCreator_Call) RunAndReturn(run func(creator domain.Creator) (domain.Creator, error)) *MockApi_GetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPost provides a mock function for the type MockApi
func (_mock *MockApi) GetCreatorPost(userID int, postid int) (domain.Post, error) {
	ret := _mock.Called(userID, postid)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPost")
	}

	var r0 domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) (domain.Post, error)); ok {
		return returnFunc(userID, postid)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) domain.Post); ok {
		r0 = returnFunc(userID, postid)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(userID, postid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetCreatorPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPost'
type MockApi_GetCreatorPost_Call struct {
	*mock.Call
}

// GetCreatorPost is a helper method to define mock.On call
//   - userID int
//   - postid int
func (_e *MockApi_Expecter) GetCreatorPost(userID interface{}, postid interface{}) *MockApi_GetCreatorPost_Call {
	return &MockApi_GetCreatorPost_Call{Call: _e.mock.On("GetCreatorPost", userID, postid)}
}

func (_c *MockApi_GetCreatorPost_Call) Run(run func(userID int, postid int)) *MockApi_GetCreatorPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApi_GetCreatorPost_Call) Return(post domain.Post, err error) *MockApi_GetCreatorPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockApi_GetCreatorPost_Call) RunAndReturn(run func(userID int, postid int) (domain.Post, error)) *MockApi_GetCreatorPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPosts provides a mock function for the type MockApi
func (_mock *MockApi) GetCreatorPosts(userId int, page int, pageSize int) ([]domain.Post, error) {
	ret := _mock.Called(userId, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPosts")
	}

	var r0 []domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, int) ([]domain.Post, error)); ok {
		return returnFunc(userId, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, int) []domain.Post); ok {
		r0 = returnFunc(userId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = returnFunc(userId, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetCreatorPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPosts'
type MockApi_GetCreatorPosts_Call struct {
	*mock.Call
}

// GetCreatorPosts is a helper method to define mock.On call
//   - userId int
//   - page int
//   - pageSize int
func (_e *MockApi_Expecter) GetCreatorPosts(userId interface{}, page interface{}, pageSize interface{}) *MockApi_GetCreatorPosts_Call {
	return &MockApi_GetCreatorPosts_Call{Call: _e.mock.On("GetCreatorPosts", userId, page, pageSize)}
}

func (_c *MockApi_GetCreatorPosts_Call) Run(run func(userId int, page int, pageSize int)) *MockApi_GetCreatorPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockApi_GetCreatorPosts_Call) Return(posts []domain.Post, err error) *MockApi_GetCreatorPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockApi_GetCreatorPosts_Call) RunAndReturn(run func(userId int, page int, pageSize int) ([]domain.Post, error)) *MockApi_GetCreatorPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreators provides a mock function for the type MockApi
func (_mock *MockApi) GetCreators(page int, pageSize int) ([]domain.Creator, error) {
	ret := _mock.Called(page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreators")
	}

	var r0 []domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]domain.Creator, error)); ok {
		return returnFunc(page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []domain.Creator); ok {
		r0 = returnFunc(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Creator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetCreators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreators'
type MockApi_GetCreators_Call struct {
	*mock.Call
}

// GetCreators is a helper method to define mock.On call
//   - page int
//   - pageSize int
func (_e *MockApi_Expecter) GetCreators(page interface{}, pageSize interface{}) *MockApi_GetCreators_Call {
	return &MockApi_GetCreators_Call{Call: _e.mock.On("GetCreators", page, pageSize)}
}

func (_c *MockApi_GetCreators_Call) Run(run func(page int, pageSize int)) *MockApi_GetCreators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApi_GetCreators_Call) Return(creators []domain.Creator, err error) *MockApi_GetCreators_Call {
	_c.Call.Return(creators, err)
	return _c
}

func (_c *MockApi_GetCreators_Call) RunAndReturn(run func(page int, pageSize int) ([]domain.Creator, error)) *MockApi_GetCreators_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockApi
func (_mock *MockApi) GetUser(id uint) (domain.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) (domain.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) domain.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockApi_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id uint
func (_e *MockApi_Expecter) GetUser(id interface{}) *MockApi_GetUser_Call {
	return &MockApi_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockApi_GetUser_Call) Run(run func(id uint)) *MockApi_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_GetUser_Call) Return(user domain.User, err error) *MockApi_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockApi_GetUser_Call) RunAndReturn(run func(id uint) (domain.User, error)) *MockApi_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMemberships provides a mock function for the type MockApi
func (_mock *MockApi) GetUserMemberships(userid uint) ([]domain.Members, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemberships")
	}

	var r0 []domain.Members
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) ([]domain.Members, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) []domain.Members); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Members)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetUserMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMemberships'
type MockApi_GetUserMemberships_Call struct {
	*mock.Call
}

// GetUserMemberships is a helper method to define mock.On call
//   - userid uint
func (_e *MockApi_Expecter) GetUserMemberships(userid interface{}) *MockApi_GetUserMemberships_Call {
	return &MockApi_GetUserMemberships_Call{Call: _e.mock.On("GetUserMemberships", userid)}
}

func (_c *MockApi_GetUserMemberships_Call) Run(run func(userid uint)) *MockApi_GetUserMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_GetUserMemberships_Call) Return(memberss []domain.Members, err error) *MockApi_GetUserMemberships_Call {
	_c.Call.Return(memberss, err)
	return _c
}

func (_c *MockApi_GetUserMemberships_Call) RunAndReturn(run func(userid uint) ([]domain.Members, error)) *MockApi_GetUserMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMembershipsandSubscriptions provides a mock function for the type MockApi
func (_mock *MockApi) GetUserMembershipsandSubscriptions(userid int) ([]domain.MembershipSubscription, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMembershipsandSubscriptions")
	}

	var r0 []domain.MembershipSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]domain.MembershipSubscription, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []domain.MembershipSubscription); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetUserMembershipsandSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMembershipsandSubscriptions'
type MockApi_GetUserMembershipsandSubscriptions_Call struct {
	*mock.Call
}

// GetUserMembershipsandSubscriptions is a helper method to define mock.On call
//   - userid int
func (_e *MockApi_Expecter) GetUserMembershipsandSubscriptions(userid interface{}) *MockApi_GetUserMembershipsandSubscriptions_Call {
	return &MockApi_GetUserMembershipsandSubscriptions_Call{Call: _e.mock.On("GetUserMembershipsandSubscriptions", userid)}
}

func (_c *MockApi_GetUserMembershipsandSubscriptions_Call) Run(run func(userid int)) *MockApi_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_GetUserMembershipsandSubscriptions_Call) Return(membershipSubscriptions []domain.MembershipSubscription, err error) *MockApi_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(membershipSubscriptions, err)
	return _c
}

func (_c *MockApi_GetUserMembershipsandSubscriptions_Call) RunAndReturn(run func(userid int) ([]domain.MembershipSubscription, error)) *MockApi_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSubscription provides a mock function for the type MockApi
func (_mock *MockApi) GetUserSubscription(membershipid int) (domain.Subscription, error) {
	ret := _mock.Called(membershipid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (domain.Subscription, error)); ok {
		return returnFunc(membershipid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) domain.Subscription); ok {
		r0 = returnFunc(membershipid)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(membershipid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_GetUserSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSubscription'
type MockApi_GetUserSubscription_Call struct {
	*mock.Call
}

// GetUserSubscription is a helper method to define mock.On call
//   - membershipid int
func (_e *MockApi_Expecter) GetUserSubscription(membershipid interface{}) *MockApi_GetUserSubscription_Call {
	return &MockApi_GetUserSubscription_Call{Call: _e.mock.On("GetUserSubscription", membershipid)}
}

func (_c *MockApi_GetUserSubscription_Call) Run(run func(membershipid int)) *MockApi_GetUserSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_GetUserSubscription_Call) Return(subscription domain.Subscription, err error) *MockApi_GetUserSubscription_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockApi_GetUserSubscription_Call) RunAndReturn(run func(membershipid int) (domain.Subscription, error)) *MockApi_GetUserSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockApi
func (_mock *MockApi) Login(email string, password string) (domain.User, string, error) {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (domain.User, string, error)); ok {
		return returnFunc(email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = returnFunc(email, password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = returnFunc(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = returnFunc(email, password)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockApi_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockApi_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockApi_Expecter) Login(email interface{}, password interface{}) *MockApi_Login_Call {
	return &MockApi_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *MockApi_Login_Call) Run(run func(email string, password string)) *MockApi_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockApi_Login_Call) Return(user domain.User, s string, err error) *MockApi_Login_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *MockApi_Login_Call) RunAndReturn(run func(email string, password string) (domain.User, string, error)) *MockApi_Login_Call {
	_c.Call.Return(run)
	return _c
}

// LoginGoogleUser provides a mock function for the type MockApi
func (_mock *MockApi) LoginGoogleUser(cred string) (domain.User, string, error) {
	ret := _mock.Called(cred)

	if len(ret) == 0 {
		panic("no return value specified for LoginGoogleUser")
	}

	var r0 domain.User
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.User, string, error)); ok {
		return returnFunc(cred)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = returnFunc(cred)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(string) string); ok {
		r1 = returnFunc(cred)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(cred)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockApi_LoginGoogleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginGoogleUser'
type MockApi_LoginGoogleUser_Call struct {
	*mock.Call
}

// LoginGoogleUser is a helper method to define mock.On call
//   - cred string
func (_e *MockApi_Expecter) LoginGoogleUser(cred interface{}) *MockApi_LoginGoogleUser_Call {
	return &MockApi_LoginGoogleUser_Call{Call: _e.mock.On("LoginGoogleUser", cred)}
}

func (_c *MockApi_LoginGoogleUser_Call) Run(run func(cred string)) *MockApi_LoginGoogleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_LoginGoogleUser_Call) Return(user domain.User, s string, err error) *MockApi_LoginGoogleUser_Call {
	_c.Call.Return(user, s, err)
	return _c
}

func (_c *MockApi_LoginGoogleUser_Call) RunAndReturn(run func(cred string) (domain.User, string, error)) *MockApi_LoginGoogleUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCreator provides a mock function for the type MockApi
func (_mock *MockApi) UpdateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_UpdateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCreator'
type MockApi_UpdateCreator_Call struct {
	*mock.Call
}

// UpdateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *MockApi_Expecter) UpdateCreator(creator interface{}) *MockApi_UpdateCreator_Call {
	return &MockApi_UpdateCreator_Call{Call: _e.mock.On("UpdateCreator", creator)}
}

func (_c *MockApi_UpdateCreator_Call) Run(run func(creator *domain.Creator)) *MockApi_UpdateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_UpdateCreator_Call) Return(err error) *MockApi_UpdateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_UpdateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *MockApi_UpdateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockApi
func (_mock *MockApi) UpdateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockApi_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockApi_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockApi_Expecter) UpdateUser(user interface{}) *MockApi_UpdateUser_Call {
	return &MockApi_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockApi_UpdateUser_Call) Run(run func(user *domain.User)) *MockApi_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_UpdateUser_Call) Return(err error) *MockApi_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockApi_UpdateUser_Call) RunAndReturn(run func(user *domain.User) error) *MockApi_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJwt provides a mock function for the type MockApi
func (_mock *MockApi) VerifyJwt(token string) (domain.Payload, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJwt")
	}

	var r0 domain.Payload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.Payload, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.Payload); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(domain.Payload)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockApi_VerifyJwt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJwt'
type MockApi_VerifyJwt_Call struct {
	*mock.Call
}

// VerifyJwt is a helper method to define mock.On call
//   - token string
func (_e *MockApi_Expecter) VerifyJwt(token interface{}) *MockApi_VerifyJwt_Call {
	return &MockApi_VerifyJwt_Call{Call: _e.mock.On("VerifyJwt", token)}
}

func (_c *MockApi_VerifyJwt_Call) Run(run func(token string)) *MockApi_VerifyJwt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockApi_VerifyJwt_Call) Return(payload domain.Payload, err error) *MockApi_VerifyJwt_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockApi_VerifyJwt_Call) RunAndReturn(run func(token string) (domain.Payload, error)) *MockApi_VerifyJwt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDb creates a new instance of MockDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDb {
	mock := &MockDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDb is an autogenerated mock type for the Db type
type MockDb struct {
	mock.Mock
}

type MockDb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDb) EXPECT() *MockDb_Expecter {
	return &MockDb_Expecter{mock: &_m.Mock}
}

// CreateContent provides a mock function for the type MockDb
func (_mock *MockDb) CreateContent(content *domain.Content) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for CreateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Content) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContent'
type MockDb_CreateContent_Call struct {
	*mock.Call
}

// CreateContent is a helper method to define mock.On call
//   - content *domain.Content
func (_e *MockDb_Expecter) CreateContent(content interface{}) *MockDb_CreateContent_Call {
	return &MockDb_CreateContent_Call{Call: _e.mock.On("CreateContent", content)}
}

func (_c *MockDb_CreateContent_Call) Run(run func(content *domain.Content)) *MockDb_CreateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Content
		if args[0] != nil {
			arg0 = args[0].(*domain.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreateContent_Call) Return(err error) *MockDb_CreateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreateContent_Call) RunAndReturn(run func(content *domain.Content) error) *MockDb_CreateContent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCreator provides a mock function for the type MockDb
func (_mock *MockDb) CreateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreator'
type MockDb_CreateCreator_Call struct {
	*mock.Call
}

// CreateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *MockDb_Expecter) CreateCreator(creator interface{}) *MockDb_CreateCreator_Call {
	return &MockDb_CreateCreator_Call{Call: _e.mock.On("CreateCreator", creator)}
}

func (_c *MockDb_CreateCreator_Call) Run(run func(creator *domain.Creator)) *MockDb_CreateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreateCreator_Call) Return(err error) *MockDb_CreateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *MockDb_CreateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMember provides a mock function for the type MockDb
func (_mock *MockDb) CreateMember(member *domain.Members) error {
	ret := _mock.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Members) error); ok {
		r0 = returnFunc(member)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type MockDb_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - member *domain.Members
func (_e *MockDb_Expecter) CreateMember(member interface{}) *MockDb_CreateMember_Call {
	return &MockDb_CreateMember_Call{Call: _e.mock.On("CreateMember", member)}
}

func (_c *MockDb_CreateMember_Call) Run(run func(member *domain.Members)) *MockDb_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Members
		if args[0] != nil {
			arg0 = args[0].(*domain.Members)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreateMember_Call) Return(err error) *MockDb_CreateMember_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreateMember_Call) RunAndReturn(run func(member *domain.Members) error) *MockDb_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function for the type MockDb
func (_mock *MockDb) CreatePost(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockDb_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - post *domain.Post
func (_e *MockDb_Expecter) CreatePost(post interface{}) *MockDb_CreatePost_Call {
	return &MockDb_CreatePost_Call{Call: _e.mock.On("CreatePost", post)}
}

func (_c *MockDb_CreatePost_Call) Run(run func(post *domain.Post)) *MockDb_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreatePost_Call) Return(err error) *MockDb_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreatePost_Call) RunAndReturn(run func(post *domain.Post) error) *MockDb_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function for the type MockDb
func (_mock *MockDb) CreateSubscription(sub *domain.Subscription) error {
	ret := _mock.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Subscription) error); ok {
		r0 = returnFunc(sub)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockDb_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - sub *domain.Subscription
func (_e *MockDb_Expecter) CreateSubscription(sub interface{}) *MockDb_CreateSubscription_Call {
	return &MockDb_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", sub)}
}

func (_c *MockDb_CreateSubscription_Call) Run(run func(sub *domain.Subscription)) *MockDb_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Subscription
		if args[0] != nil {
			arg0 = args[0].(*domain.Subscription)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreateSubscription_Call) Return(err error) *MockDb_CreateSubscription_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreateSubscription_Call) RunAndReturn(run func(sub *domain.Subscription) error) *MockDb_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockDb
func (_mock *MockDb) CreateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockDb_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockDb_Expecter) CreateUser(user interface{}) *MockDb_CreateUser_Call {
	return &MockDb_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockDb_CreateUser_Call) Run(run func(user *domain.User)) *MockDb_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_CreateUser_Call) Return(err error) *MockDb_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_CreateUser_Call) RunAndReturn(run func(user *domain.User) error) *MockDb_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockDb
func (_mock *MockDb) DeleteUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockDb_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockDb_Expecter) DeleteUser(user interface{}) *MockDb_DeleteUser_Call {
	return &MockDb_DeleteUser_Call{Call: _e.mock.On("DeleteUser", user)}
}

func (_c *MockDb_DeleteUser_Call) Run(run func(user *domain.User)) *MockDb_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_DeleteUser_Call) Return(err error) *MockDb_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_DeleteUser_Call) RunAndReturn(run func(user *domain.User) error) *MockDb_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreator provides a mock function for the type MockDb
func (_mock *MockDb) GetCreator(creator domain.Creator) (domain.Creator, error) {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for GetCreator")
	}

	var r0 domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) (domain.Creator, error)); ok {
		return returnFunc(creator)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Creator) domain.Creator); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Get(0).(domain.Creator)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Creator) error); ok {
		r1 = returnFunc(creator)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreator'
type MockDb_GetCreator_Call struct {
	*mock.Call
}

// GetCreator is a helper method to define mock.On call
//   - creator domain.Creator
func (_e *MockDb_Expecter) GetCreator(creator interface{}) *MockDb_GetCreator_Call {
	return &MockDb_GetCreator_Call{Call: _e.mock.On("GetCreator", creator)}
}

func (_c *MockDb_GetCreator_Call) Run(run func(creator domain.Creator)) *MockDb_GetCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Creator
		if args[0] != nil {
			arg0 = args[0].(domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetCreator_Call) Return(creator1 domain.Creator, err error) *MockDb_GetCreator_Call {
	_c.Call.Return(creator1, err)
	return _c
}

func (_c *MockDb_GetCreator_Call) RunAndReturn(run func(creator domain.Creator) (domain.Creator, error)) *MockDb_GetCreator_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPost provides a mock function for the type MockDb
func (_mock *MockDb) GetCreatorPost(creatorid uint, postid uint) (domain.Post, error) {
	ret := _mock.Called(creatorid, postid)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPost")
	}

	var r0 domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, uint) (domain.Post, error)); ok {
		return returnFunc(creatorid, postid)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, uint) domain.Post); ok {
		r0 = returnFunc(creatorid, postid)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}
	if returnFunc, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = returnFunc(creatorid, postid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetCreatorPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPost'
type MockDb_GetCreatorPost_Call struct {
	*mock.Call
}

// GetCreatorPost is a helper method to define mock.On call
//   - creatorid uint
//   - postid uint
func (_e *MockDb_Expecter) GetCreatorPost(creatorid interface{}, postid interface{}) *MockDb_GetCreatorPost_Call {
	return &MockDb_GetCreatorPost_Call{Call: _e.mock.On("GetCreatorPost", creatorid, postid)}
}

func (_c *MockDb_GetCreatorPost_Call) Run(run func(creatorid uint, postid uint)) *MockDb_GetCreatorPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 uint
		if args[1] != nil {
			arg1 = args[1].(uint)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDb_GetCreatorPost_Call) Return(post domain.Post, err error) *MockDb_GetCreatorPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockDb_GetCreatorPost_Call) RunAndReturn(run func(creatorid uint, postid uint) (domain.Post, error)) *MockDb_GetCreatorPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreatorPosts provides a mock function for the type MockDb
func (_mock *MockDb) GetCreatorPosts(creatorid uint, page int, pagesize int) ([]domain.Post, error) {
	ret := _mock.Called(creatorid, page, pagesize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreatorPosts")
	}

	var r0 []domain.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) ([]domain.Post, error)); ok {
		return returnFunc(creatorid, page, pagesize)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) []domain.Post); ok {
		r0 = returnFunc(creatorid, page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = returnFunc(creatorid, page, pagesize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetCreatorPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreatorPosts'
type MockDb_GetCreatorPosts_Call struct {
	*mock.Call
}

// GetCreatorPosts is a helper method to define mock.On call
//   - creatorid uint
//   - page int
//   - pagesize int
func (_e *MockDb_Expecter) GetCreatorPosts(creatorid interface{}, page interface{}, pagesize interface{}) *MockDb_GetCreatorPosts_Call {
	return &MockDb_GetCreatorPosts_Call{Call: _e.mock.On("GetCreatorPosts", creatorid, page, pagesize)}
}

func (_c *MockDb_GetCreatorPosts_Call) Run(run func(creatorid uint, page int, pagesize int)) *MockDb_GetCreatorPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDb_GetCreatorPosts_Call) Return(posts []domain.Post, err error) *MockDb_GetCreatorPosts_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockDb_GetCreatorPosts_Call) RunAndReturn(run func(creatorid uint, page int, pagesize int) ([]domain.Post, error)) *MockDb_GetCreatorPosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreators provides a mock function for the type MockDb
func (_mock *MockDb) GetCreators(page int, pagesize int) ([]domain.Creator, error) {
	ret := _mock.Called(page, pagesize)

	if len(ret) == 0 {
		panic("no return value specified for GetCreators")
	}

	var r0 []domain.Creator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]domain.Creator, error)); ok {
		return returnFunc(page, pagesize)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []domain.Creator); ok {
		r0 = returnFunc(page, pagesize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Creator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(page, pagesize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetCreators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreators'
type MockDb_GetCreators_Call struct {
	*mock.Call
}

// GetCreators is a helper method to define mock.On call
//   - page int
//   - pagesize int
func (_e *MockDb_Expecter) GetCreators(page interface{}, pagesize interface{}) *MockDb_GetCreators_Call {
	return &MockDb_GetCreators_Call{Call: _e.mock.On("GetCreators", page, pagesize)}
}

func (_c *MockDb_GetCreators_Call) Run(run func(page int, pagesize int)) *MockDb_GetCreators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDb_GetCreators_Call) Return(creators []domain.Creator, err error) *MockDb_GetCreators_Call {
	_c.Call.Return(creators, err)
	return _c
}

func (_c *MockDb_GetCreators_Call) RunAndReturn(run func(page int, pagesize int) ([]domain.Creator, error)) *MockDb_GetCreators_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockDb
func (_mock *MockDb) GetUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockDb_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockDb_Expecter) GetUser(user interface{}) *MockDb_GetUser_Call {
	return &MockDb_GetUser_Call{Call: _e.mock.On("GetUser", user)}
}

func (_c *MockDb_GetUser_Call) Run(run func(user *domain.User)) *MockDb_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetUser_Call) Return(err error) *MockDb_GetUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_GetUser_Call) RunAndReturn(run func(user *domain.User) error) *MockDb_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmailOrUsername provides a mock function for the type MockDb
func (_mock *MockDb) GetUserByEmailOrUsername(user domain.User) (domain.User, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmailOrUsername")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetUserByEmailOrUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmailOrUsername'
type MockDb_GetUserByEmailOrUsername_Call struct {
	*mock.Call
}

// GetUserByEmailOrUsername is a helper method to define mock.On call
//   - user domain.User
func (_e *MockDb_Expecter) GetUserByEmailOrUsername(user interface{}) *MockDb_GetUserByEmailOrUsername_Call {
	return &MockDb_GetUserByEmailOrUsername_Call{Call: _e.mock.On("GetUserByEmailOrUsername", user)}
}

func (_c *MockDb_GetUserByEmailOrUsername_Call) Run(run func(user domain.User)) *MockDb_GetUserByEmailOrUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.User
		if args[0] != nil {
			arg0 = args[0].(domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetUserByEmailOrUsername_Call) Return(user1 domain.User, err error) *MockDb_GetUserByEmailOrUsername_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockDb_GetUserByEmailOrUsername_Call) RunAndReturn(run func(user domain.User) (domain.User, error)) *MockDb_GetUserByEmailOrUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByFireBaseUid provides a mock function for the type MockDb
func (_mock *MockDb) GetUserByFireBaseUid(user domain.User) (domain.User, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByFireBaseUid")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (domain.User, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetUserByFireBaseUid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByFireBaseUid'
type MockDb_GetUserByFireBaseUid_Call struct {
	*mock.Call
}

// GetUserByFireBaseUid is a helper method to define mock.On call
//   - user domain.User
func (_e *MockDb_Expecter) GetUserByFireBaseUid(user interface{}) *MockDb_GetUserByFireBaseUid_Call {
	return &MockDb_GetUserByFireBaseUid_Call{Call: _e.mock.On("GetUserByFireBaseUid", user)}
}

func (_c *MockDb_GetUserByFireBaseUid_Call) Run(run func(user domain.User)) *MockDb_GetUserByFireBaseUid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.User
		if args[0] != nil {
			arg0 = args[0].(domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetUserByFireBaseUid_Call) Return(user1 domain.User, err error) *MockDb_GetUserByFireBaseUid_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockDb_GetUserByFireBaseUid_Call) RunAndReturn(run func(user domain.User) (domain.User, error)) *MockDb_GetUserByFireBaseUid_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMemberships provides a mock function for the type MockDb
func (_mock *MockDb) GetUserMemberships(memberid uint, page int, pageSize int) ([]domain.Members, error) {
	ret := _mock.Called(memberid, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemberships")
	}

	var r0 []domain.Members
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) ([]domain.Members, error)); ok {
		return returnFunc(memberid, page, pageSize)
	}
	if returnFunc, ok := ret.Get(0).(func(uint, int, int) []domain.Members); ok {
		r0 = returnFunc(memberid, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Members)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = returnFunc(memberid, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetUserMemberships_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMemberships'
type MockDb_GetUserMemberships_Call struct {
	*mock.Call
}

// GetUserMemberships is a helper method to define mock.On call
//   - memberid uint
//   - page int
//   - pageSize int
func (_e *MockDb_Expecter) GetUserMemberships(memberid interface{}, page interface{}, pageSize interface{}) *MockDb_GetUserMemberships_Call {
	return &MockDb_GetUserMemberships_Call{Call: _e.mock.On("GetUserMemberships", memberid, page, pageSize)}
}

func (_c *MockDb_GetUserMemberships_Call) Run(run func(memberid uint, page int, pageSize int)) *MockDb_GetUserMemberships_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDb_GetUserMemberships_Call) Return(memberss []domain.Members, err error) *MockDb_GetUserMemberships_Call {
	_c.Call.Return(memberss, err)
	return _c
}

func (_c *MockDb_GetUserMemberships_Call) RunAndReturn(run func(memberid uint, page int, pageSize int) ([]domain.Members, error)) *MockDb_GetUserMemberships_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserMembershipsandSubscriptions provides a mock function for the type MockDb
func (_mock *MockDb) GetUserMembershipsandSubscriptions(userid int) ([]domain.MembershipSubscription, error) {
	ret := _mock.Called(userid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMembershipsandSubscriptions")
	}

	var r0 []domain.MembershipSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) ([]domain.MembershipSubscription, error)); ok {
		return returnFunc(userid)
	}
	if returnFunc, ok := ret.Get(0).(func(int) []domain.MembershipSubscription); ok {
		r0 = returnFunc(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MembershipSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(userid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetUserMembershipsandSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserMembershipsandSubscriptions'
type MockDb_GetUserMembershipsandSubscriptions_Call struct {
	*mock.Call
}

// GetUserMembershipsandSubscriptions is a helper method to define mock.On call
//   - userid int
func (_e *MockDb_Expecter) GetUserMembershipsandSubscriptions(userid interface{}) *MockDb_GetUserMembershipsandSubscriptions_Call {
	return &MockDb_GetUserMembershipsandSubscriptions_Call{Call: _e.mock.On("GetUserMembershipsandSubscriptions", userid)}
}

func (_c *MockDb_GetUserMembershipsandSubscriptions_Call) Run(run func(userid int)) *MockDb_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetUserMembershipsandSubscriptions_Call) Return(membershipSubscriptions []domain.MembershipSubscription, err error) *MockDb_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(membershipSubscriptions, err)
	return _c
}

func (_c *MockDb_GetUserMembershipsandSubscriptions_Call) RunAndReturn(run func(userid int) ([]domain.MembershipSubscription, error)) *MockDb_GetUserMembershipsandSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserSubscription provides a mock function for the type MockDb
func (_mock *MockDb) GetUserSubscription(membershipId int) (domain.Subscription, error) {
	ret := _mock.Called(membershipId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSubscription")
	}

	var r0 domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (domain.Subscription, error)); ok {
		return returnFunc(membershipId)
	}
	if returnFunc, ok := ret.Get(0).(func(int) domain.Subscription); ok {
		r0 = returnFunc(membershipId)
	} else {
		r0 = ret.Get(0).(domain.Subscription)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(membershipId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDb_GetUserSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserSubscription'
type MockDb_GetUserSubscription_Call struct {
	*mock.Call
}

// GetUserSubscription is a helper method to define mock.On call
//   - membershipId int
func (_e *MockDb_Expecter) GetUserSubscription(membershipId interface{}) *MockDb_GetUserSubscription_Call {
	return &MockDb_GetUserSubscription_Call{Call: _e.mock.On("GetUserSubscription", membershipId)}
}

func (_c *MockDb_GetUserSubscription_Call) Run(run func(membershipId int)) *MockDb_GetUserSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_GetUserSubscription_Call) Return(subscription domain.Subscription, err error) *MockDb_GetUserSubscription_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockDb_GetUserSubscription_Call) RunAndReturn(run func(membershipId int) (domain.Subscription, error)) *MockDb_GetUserSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateContent provides a mock function for the type MockDb
func (_mock *MockDb) UpdateContent(content *domain.Content) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Content) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_UpdateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateContent'
type MockDb_UpdateContent_Call struct {
	*mock.Call
}

// UpdateContent is a helper method to define mock.On call
//   - content *domain.Content
func (_e *MockDb_Expecter) UpdateContent(content interface{}) *MockDb_UpdateContent_Call {
	return &MockDb_UpdateContent_Call{Call: _e.mock.On("UpdateContent", content)}
}

func (_c *MockDb_UpdateContent_Call) Run(run func(content *domain.Content)) *MockDb_UpdateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Content
		if args[0] != nil {
			arg0 = args[0].(*domain.Content)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_UpdateContent_Call) Return(err error) *MockDb_UpdateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_UpdateContent_Call) RunAndReturn(run func(content *domain.Content) error) *MockDb_UpdateContent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCreator provides a mock function for the type MockDb
func (_mock *MockDb) UpdateCreator(creator *domain.Creator) error {
	ret := _mock.Called(creator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreator")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Creator) error); ok {
		r0 = returnFunc(creator)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_UpdateCreator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCreator'
type MockDb_UpdateCreator_Call struct {
	*mock.Call
}

// UpdateCreator is a helper method to define mock.On call
//   - creator *domain.Creator
func (_e *MockDb_Expecter) UpdateCreator(creator interface{}) *MockDb_UpdateCreator_Call {
	return &MockDb_UpdateCreator_Call{Call: _e.mock.On("UpdateCreator", creator)}
}

func (_c *MockDb_UpdateCreator_Call) Run(run func(creator *domain.Creator)) *MockDb_UpdateCreator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Creator
		if args[0] != nil {
			arg0 = args[0].(*domain.Creator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_UpdateCreator_Call) Return(err error) *MockDb_UpdateCreator_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_UpdateCreator_Call) RunAndReturn(run func(creator *domain.Creator) error) *MockDb_UpdateCreator_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function for the type MockDb
func (_mock *MockDb) UpdatePost(post *domain.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockDb_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - post *domain.Post
func (_e *MockDb_Expecter) UpdatePost(post interface{}) *MockDb_UpdatePost_Call {
	return &MockDb_UpdatePost_Call{Call: _e.mock.On("UpdatePost", post)}
}

func (_c *MockDb_UpdatePost_Call) Run(run func(post *domain.Post)) *MockDb_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.Post
		if args[0] != nil {
			arg0 = args[0].(*domain.Post)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_UpdatePost_Call) Return(err error) *MockDb_UpdatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_UpdatePost_Call) RunAndReturn(run func(post *domain.Post) error) *MockDb_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockDb
func (_mock *MockDb) UpdateUser(user *domain.User) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDb_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockDb_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - user *domain.User
func (_e *MockDb_Expecter) UpdateUser(user interface{}) *MockDb_UpdateUser_Call {
	return &MockDb_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *MockDb_UpdateUser_Call) Run(run func(user *domain.User)) *MockDb_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDb_UpdateUser_Call) Return(err error) *MockDb_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDb_UpdateUser_Call) RunAndReturn(run func(user *domain.User) error) *MockDb_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamoClient creates a new instance of MockDynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoClient {
	mock := &MockDynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamoClient is an autogenerated mock type for the DynamoClient type
type MockDynamoClient struct {
	mock.Mock
}

type MockDynamoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoClient) EXPECT() *MockDynamoClient_Expecter {
	return &MockDynamoClient_Expecter{mock: &_m.Mock}
}

// GetItem provides a mock function for the type MockDynamoClient
func (_mock *MockDynamoClient) GetItem(ec2Id string, TaskId string) (domain.Ec2TaskState, error) {
	ret := _mock.Called(ec2Id, TaskId)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 domain.Ec2TaskState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (domain.Ec2TaskState, error)); ok {
		return returnFunc(ec2Id, TaskId)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) domain.Ec2TaskState); ok {
		r0 = returnFunc(ec2Id, TaskId)
	} else {
		r0 = ret.Get(0).(domain.Ec2TaskState)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(ec2Id, TaskId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamoClient_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type MockDynamoClient_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - ec2Id string
//   - TaskId string
func (_e *MockDynamoClient_Expecter) GetItem(ec2Id interface{}, TaskId interface{}) *MockDynamoClient_GetItem_Call {
	return &MockDynamoClient_GetItem_Call{Call: _e.mock.On("GetItem", ec2Id, TaskId)}
}

func (_c *MockDynamoClient_GetItem_Call) Run(run func(ec2Id string, TaskId string)) *MockDynamoClient_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDynamoClient_GetItem_Call) Return(ec2TaskState domain.Ec2TaskState, err error) *MockDynamoClient_GetItem_Call {
	_c.Call.Return(ec2TaskState, err)
	return _c
}

func (_c *MockDynamoClient_GetItem_Call) RunAndReturn(run func(ec2Id string, TaskId string) (domain.Ec2TaskState, error)) *MockDynamoClient_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function for the type MockDynamoClient
func (_mock *MockDynamoClient) PutItem(item domain.Ec2TaskState) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Ec2TaskState) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDynamoClient_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type MockDynamoClient_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - item domain.Ec2TaskState
func (_e *MockDynamoClient_Expecter) PutItem(item interface{}) *MockDynamoClient_PutItem_Call {
	return &MockDynamoClient_PutItem_Call{Call: _e.mock.On("PutItem", item)}
}

func (_c *MockDynamoClient_PutItem_Call) Run(run func(item domain.Ec2TaskState)) *MockDynamoClient_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Ec2TaskState
		if args[0] != nil {
			arg0 = args[0].(domain.Ec2TaskState)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDynamoClient_PutItem_Call) Return(err error) *MockDynamoClient_PutItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDynamoClient_PutItem_Call) RunAndReturn(run func(item domain.Ec2TaskState) error) *MockDynamoClient_PutItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEc2Client creates a new instance of MockEc2Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEc2Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEc2Client {
	mock := &MockEc2Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEc2Client is an autogenerated mock type for the Ec2Client type
type MockEc2Client struct {
	mock.Mock
}

type MockEc2Client_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEc2Client) EXPECT() *MockEc2Client_Expecter {
	return &MockEc2Client_Expecter{mock: &_m.Mock}
}

// CreateInstance provides a mock function for the type MockEc2Client
func (_mock *MockEc2Client) CreateInstance(timestarted string, taskid string) (*ec2.RunInstancesOutput, error) {
	ret := _mock.Called(timestarted, taskid)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 *ec2.RunInstancesOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*ec2.RunInstancesOutput, error)); ok {
		return returnFunc(timestarted, taskid)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *ec2.RunInstancesOutput); ok {
		r0 = returnFunc(timestarted, taskid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RunInstancesOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(timestarted, taskid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEc2Client_CreateInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInstance'
type MockEc2Client_CreateInstance_Call struct {
	*mock.Call
}

// CreateInstance is a helper method to define mock.On call
//   - timestarted string
//   - taskid string
func (_e *MockEc2Client_Expecter) CreateInstance(timestarted interface{}, taskid interface{}) *MockEc2Client_CreateInstance_Call {
	return &MockEc2Client_CreateInstance_Call{Call: _e.mock.On("CreateInstance", timestarted, taskid)}
}

func (_c *MockEc2Client_CreateInstance_Call) Run(run func(timestarted string, taskid string)) *MockEc2Client_CreateInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEc2Client_CreateInstance_Call) Return(runInstancesOutput *ec2.RunInstancesOutput, err error) *MockEc2Client_CreateInstance_Call {
	_c.Call.Return(runInstancesOutput, err)
	return _c
}

func (_c *MockEc2Client_CreateInstance_Call) RunAndReturn(run func(timestarted string, taskid string) (*ec2.RunInstancesOutput, error)) *MockEc2Client_CreateInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyInstance provides a mock function for the type MockEc2Client
func (_mock *MockEc2Client) DestroyInstance(instanceId string) error {
	ret := _mock.Called(instanceId)

	if len(ret) == 0 {
		panic("no return value specified for DestroyInstance")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(instanceId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEc2Client_DestroyInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyInstance'
type MockEc2Client_DestroyInstance_Call struct {
	*mock.Call
}

// DestroyInstance is a helper method to define mock.On call
//   - instanceId string
func (_e *MockEc2Client_Expecter) DestroyInstance(instanceId interface{}) *MockEc2Client_DestroyInstance_Call {
	return &MockEc2Client_DestroyInstance_Call{Call: _e.mock.On("DestroyInstance", instanceId)}
}

func (_c *MockEc2Client_DestroyInstance_Call) Run(run func(instanceId string)) *MockEc2Client_DestroyInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEc2Client_DestroyInstance_Call) Return(err error) *MockEc2Client_DestroyInstance_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEc2Client_DestroyInstance_Call) RunAndReturn(run func(instanceId string) error) *MockEc2Client_DestroyInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRedisClient creates a new instance of MockRedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisClient {
	mock := &MockRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRedisClient is an autogenerated mock type for the RedisClient type
type MockRedisClient struct {
	mock.Mock
}

type MockRedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisClient) EXPECT() *MockRedisClient_Expecter {
	return &MockRedisClient_Expecter{mock: &_m.Mock}
}

// MakeRedisClient provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) MakeRedisClient() interface{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MakeRedisClient")
	}

	var r0 interface{}
	if returnFunc, ok := ret.Get(0).(func() interface{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	return r0
}

// MockRedisClient_MakeRedisClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeRedisClient'
type MockRedisClient_MakeRedisClient_Call struct {
	*mock.Call
}

// MakeRedisClient is a helper method to define mock.On call
func (_e *MockRedisClient_Expecter) MakeRedisClient() *MockRedisClient_MakeRedisClient_Call {
	return &MockRedisClient_MakeRedisClient_Call{Call: _e.mock.On("MakeRedisClient")}
}

func (_c *MockRedisClient_MakeRedisClient_Call) Run(run func()) *MockRedisClient_MakeRedisClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClient_MakeRedisClient_Call) Return(ifaceVal interface{}) *MockRedisClient_MakeRedisClient_Call {
	_c.Call.Return(ifaceVal)
	return _c
}

func (_c *MockRedisClient_MakeRedisClient_Call) RunAndReturn(run func() interface{}) *MockRedisClient_MakeRedisClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskQueue creates a new instance of MockTaskQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskQueue {
	mock := &MockTaskQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskQueue is an autogenerated mock type for the TaskQueue type
type MockTaskQueue struct {
	mock.Mock
}

type MockTaskQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskQueue) EXPECT() *MockTaskQueue_Expecter {
	return &MockTaskQueue_Expecter{mock: &_m.Mock}
}

// DistributeTask provides a mock function for the type MockTaskQueue
func (_mock *MockTaskQueue) DistributeTask(taskName string, priority string, taskpayload interface{}) error {
	ret := _mock.Called(taskName, priority, taskpayload)

	if len(ret) == 0 {
		panic("no return value specified for DistributeTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, interface{}) error); ok {
		r0 = returnFunc(taskName, priority, taskpayload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskQueue_DistributeTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributeTask'
type MockTaskQueue_DistributeTask_Call struct {
	*mock.Call
}

// DistributeTask is a helper method to define mock.On call
//   - taskName string
//   - priority string
//   - taskpayload interface{}
func (_e *MockTaskQueue_Expecter) DistributeTask(taskName interface{}, priority interface{}, taskpayload interface{}) *MockTaskQueue_DistributeTask_Call {
	return &MockTaskQueue_DistributeTask_Call{Call: _e.mock.On("DistributeTask", taskName, priority, taskpayload)}
}

func (_c *MockTaskQueue_DistributeTask_Call) Run(run func(taskName string, priority string, taskpayload interface{})) *MockTaskQueue_DistributeTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTaskQueue_DistributeTask_Call) Return(err error) *MockTaskQueue_DistributeTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskQueue_DistributeTask_Call) RunAndReturn(run func(taskName string, priority string, taskpayload interface{}) error) *MockTaskQueue_DistributeTask_Call {
	_c.Call.Return(run)
	return _c
}
