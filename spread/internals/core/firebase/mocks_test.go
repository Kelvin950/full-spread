// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package firebaseclient

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIFirebaseClient creates a new instance of MockIFirebaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIFirebaseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIFirebaseClient {
	mock := &MockIFirebaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIFirebaseClient is an autogenerated mock type for the IFirebaseClient type
type MockIFirebaseClient struct {
	mock.Mock
}

type MockIFirebaseClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIFirebaseClient) EXPECT() *MockIFirebaseClient_Expecter {
	return &MockIFirebaseClient_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockIFirebaseClient
func (_mock *MockIFirebaseClient) CreateUser(email string, password string) (string, error) {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIFirebaseClient_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIFirebaseClient_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockIFirebaseClient_Expecter) CreateUser(email interface{}, password interface{}) *MockIFirebaseClient_CreateUser_Call {
	return &MockIFirebaseClient_CreateUser_Call{Call: _e.mock.On("CreateUser", email, password)}
}

func (_c *MockIFirebaseClient_CreateUser_Call) Run(run func(email string, password string)) *MockIFirebaseClient_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIFirebaseClient_CreateUser_Call) Return(s string, err error) *MockIFirebaseClient_CreateUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIFirebaseClient_CreateUser_Call) RunAndReturn(run func(email string, password string) (string, error)) *MockIFirebaseClient_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function for the type MockIFirebaseClient
func (_mock *MockIFirebaseClient) LoginUser(email string, password string) (string, error) {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIFirebaseClient_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockIFirebaseClient_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockIFirebaseClient_Expecter) LoginUser(email interface{}, password interface{}) *MockIFirebaseClient_LoginUser_Call {
	return &MockIFirebaseClient_LoginUser_Call{Call: _e.mock.On("LoginUser", email, password)}
}

func (_c *MockIFirebaseClient_LoginUser_Call) Run(run func(email string, password string)) *MockIFirebaseClient_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIFirebaseClient_LoginUser_Call) Return(s string, err error) *MockIFirebaseClient_LoginUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIFirebaseClient_LoginUser_Call) RunAndReturn(run func(email string, password string) (string, error)) *MockIFirebaseClient_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}
