// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package token

import (
	"time"

	"github.com/kelvin950/spread/internals/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIToken creates a new instance of MockIToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIToken {
	mock := &MockIToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIToken is an autogenerated mock type for the IToken type
type MockIToken struct {
	mock.Mock
}

type MockIToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIToken) EXPECT() *MockIToken_Expecter {
	return &MockIToken_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function for the type MockIToken
func (_mock *MockIToken) CreateToken(p domain.Payload, d time.Duration) (string, error) {
	ret := _mock.Called(p, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.Payload, time.Duration) (string, error)); ok {
		return returnFunc(p, d)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.Payload, time.Duration) string); ok {
		r0 = returnFunc(p, d)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.Payload, time.Duration) error); ok {
		r1 = returnFunc(p, d)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIToken_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockIToken_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - p domain.Payload
//   - d time.Duration
func (_e *MockIToken_Expecter) CreateToken(p interface{}, d interface{}) *MockIToken_CreateToken_Call {
	return &MockIToken_CreateToken_Call{Call: _e.mock.On("CreateToken", p, d)}
}

func (_c *MockIToken_CreateToken_Call) Run(run func(p domain.Payload, d time.Duration)) *MockIToken_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Payload
		if args[0] != nil {
			arg0 = args[0].(domain.Payload)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIToken_CreateToken_Call) Return(s string, err error) *MockIToken_CreateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockIToken_CreateToken_Call) RunAndReturn(run func(p domain.Payload, d time.Duration) (string, error)) *MockIToken_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeGoogleToken provides a mock function for the type MockIToken
func (_mock *MockIToken) DecodeGoogleToken(accessToken string) (domain.GoogleuserRes, error) {
	ret := _mock.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for DecodeGoogleToken")
	}

	var r0 domain.GoogleuserRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.GoogleuserRes, error)); ok {
		return returnFunc(accessToken)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.GoogleuserRes); ok {
		r0 = returnFunc(accessToken)
	} else {
		r0 = ret.Get(0).(domain.GoogleuserRes)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(accessToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIToken_DecodeGoogleToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeGoogleToken'
type MockIToken_DecodeGoogleToken_Call struct {
	*mock.Call
}

// DecodeGoogleToken is a helper method to define mock.On call
//   - accessToken string
func (_e *MockIToken_Expecter) DecodeGoogleToken(accessToken interface{}) *MockIToken_DecodeGoogleToken_Call {
	return &MockIToken_DecodeGoogleToken_Call{Call: _e.mock.On("DecodeGoogleToken", accessToken)}
}

func (_c *MockIToken_DecodeGoogleToken_Call) Run(run func(accessToken string)) *MockIToken_DecodeGoogleToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIToken_DecodeGoogleToken_Call) Return(googleuserRes domain.GoogleuserRes, err error) *MockIToken_DecodeGoogleToken_Call {
	_c.Call.Return(googleuserRes, err)
	return _c
}

func (_c *MockIToken_DecodeGoogleToken_Call) RunAndReturn(run func(accessToken string) (domain.GoogleuserRes, error)) *MockIToken_DecodeGoogleToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function for the type MockIToken
func (_mock *MockIToken) VerifyToken(tokenString string) (domain.Payload, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 domain.Payload
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.Payload, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.Payload); ok {
		r0 = returnFunc(tokenString)
	} else {
		r0 = ret.Get(0).(domain.Payload)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIToken_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockIToken_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockIToken_Expecter) VerifyToken(tokenString interface{}) *MockIToken_VerifyToken_Call {
	return &MockIToken_VerifyToken_Call{Call: _e.mock.On("VerifyToken", tokenString)}
}

func (_c *MockIToken_VerifyToken_Call) Run(run func(tokenString string)) *MockIToken_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIToken_VerifyToken_Call) Return(payload domain.Payload, err error) *MockIToken_VerifyToken_Call {
	_c.Call.Return(payload, err)
	return _c
}

func (_c *MockIToken_VerifyToken_Call) RunAndReturn(run func(tokenString string) (domain.Payload, error)) *MockIToken_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}
